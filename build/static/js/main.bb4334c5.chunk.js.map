{"version":3,"sources":["components/modals/ConfirmationModal.jsx","libs/env.js","components/buttons/exitbtn.js","components/badges/level.js","components/badges/suggested_time.js","components/buttons/SimpleButton.jsx","components/buttons/OpenButton.js","components/buttons/savebtn.js","components/buttons/SubmitButton.jsx","components/header/header.js","components/heading/heading.js","components/modals/SimpleModal.jsx","components/question/QuestionDescrption.js","components/question/question_heading.js","components/timer/timer.js","libs/api/baseAPI.js","libs/api/quiz.js","components/badges/SuggestedWords.js","pages/quiz/WrittingQuiz.jsx","components/writting_essay/textarea.js","pages/quiz/Logo.js","components/badges/number_of_question.js","components/input_fields/input_field.js","components/question/question.js","components/fill_in_blanks/fill_in_blanks.js","components/buttons/Review.js","components/true_false_questions/QuizSubmit.js","components/buttons/BackButton.jsx","components/buttons/NextButton.jsx","components/listening_exercise/audio_player.js","components/notification/Notification.js","pages/quiz/useRecorder.js","pages/quiz/speaking.jsx","components/checkbox/checkbox.js","components/checkbox/label.js","components/radio_buutons/radio.js","pages/quiz/QuizRunner.helpers.js","components/answers/correct_answer.js","components/answers/wrong_answer.js","components/answers/badge/answer.js","components/drop_down/SelectChoice.js","pages/quiz/ShowQuestions.jsx","pages/quiz/QuizRunner.jsx","erros/Error.jsx","App.js","components/Inspection/Inspection.js","reportWebVitals.js","index.js"],"names":["ConfirmationModal","isOpen","toggle","onClick","Modal","size","className","ModalBody","ModalFooter","style","border","type","class","defaultProps","isLocalHosted","includes","window","location","hostname","isStaging","baseUrl","baseStagingAPI","Exitbtn","props","backgroundColor","color","width","Level","level","SuggestedTime","time","SimpleButton","label","Button","cn","OpenButton","outline","Savebtn","click","SubmitButton","value","Header","src","origin","marginLeft","alt","ExerciseType","title","SimpleModal","bodyContent","footerContent","getDomainUrl","QuestionDescription","description","showBtn","targetRef","useRef","useState","setIsOpen","actualHeight","dimensions","setDimensions","useLayoutEffect","setInterval","current","offsetWidth","height","offsetHeight","getClientRects","index","collapseHeight","render","collapseState","ref","marginBottom","QuestionHeading","question","Timer","totalTimeInSeconds","onStop","localSpentTime","isStopTimer","options","autoStart","localTime","Date","setSeconds","getSeconds","parseInt","offsetTimestamp","useStopwatch","seconds","minutes","pause","hours","spent_minutes","padStart","spent_seconds","storeInLocalStorage","useCallback","timeInSeconds","sessionStorage","setItem","useEffect","BaseAPI","makeHeader","Headers","Authorization","pathname","split","Accept","fetchSecure","url","fetch","method","headers","postSecure","data","body","JSON","stringify","this","getStudentid","getQuizUrl","quiz_id","get","id","post","SuggestedWords","words","answers","TextArea","onchange","restprops","name","spellcheck","placeholder","onChange","Logo","logourl","WrittingQuiz","isLoaded","onSubmit","isReview","modal","setModal","isOpenAdditionalResourceModal","setOpenAdditionalResourceModal","additionalResourceToggle","timer","setTimer","length","wordsCounter","setWordsCount","completed_at","setIsStopTimer","status","time_spent","undefined","addEventListener","alertUser","removeEventListener","words_count","written_text","e","creatQuizDataAndSave","preventDefault","returnValue","getItem","quiz_data","is_submit","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastId","handleSubmit","useForm","error","Row","Col","user_type","recom_time","logo","xs","sm","md","task_type","dangerouslySetInnerHTML","__html","task_levels","prompt_content","html_content","showbtn","additional_resource","defaultValue","target","onBlur","href","close","xmlns","fill","viewBox","d","NumberOfQuestions","questions","InputFiled","fieldLength","maxLength","onblur","restProps","autoComplete","borderColor","Question","counter","counterClass","showNumbers","alignement","FillInBlanks","register","errors","formState","Container","console","log","question_counter","question_title","required","fillinblank1","fillinblank","fillinblank2","fillinblank3","Review","QuizSubmit","BackButton","NextButton","AudioPlayer","controls","controlsList","a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","start","stop","handleData","URL","createObjectURL","requestRecorder","then","Speaking","speakingUrl","startRecording","stopRecording","CheckBox","checked","Label","for","Radio","selectQuestionCounterOrCharacter","show_abc_sequence","isInUserSelectedAnswers","possible_answers_id","user_selected_id","user_selected","forEach","element","push","CorrectAnswer","WrongAnswer","Answer","badgeclass","SelectChoice","choices","backgroundImage","selected","map","choice","replaceAll","number","ShowQuestions","onAnswer","currentPage","answer","inputFiledLength","checkflag","currentQuestion","setCurrentQuestion","fieldNumber","isShowNumbering","fieldlenght","qai","page","replace","matched","match","questionNumber","converted","question_alignment","ReactHtmlParser","transform","node","given_answer","corrent_answer","user_answer","ans","question_id","selected_answers","sel_ans","attribs","possible_answers","possible_answer","inputLenght","input_field_length","disabled","input_field_characters_limit","dropdown_corrent_answer","question_flag","question_answer_number","is_correct","question_number","placeholder_id","question_horizontal_display","pai","image","image_height","px","defaultChecked","QuizRunner","setSpeakingUrl","showWarning","setShowWarnings","notAnsweredQuestion","setNotAnsweredQuestions","saveModal","setSaveModal","saveToggle","setCurrentPage","setQuestions","question_item","creatQuizDataAndSubmit","message","notify","fields","answeredQuestion","notAnswered","selectdAnswers","sel_answer","i","noOfFilelds","sel","join","getAttribute","question_type","is_checkbox_checked","is_radio_checked","found_answer","find","removed_selected_answer_arr","remove","sa_item_id","answer_index","indexOf","answer_item_id","found_selected_answer","selectedOptions","total_pages","user_score","Math","floor","role","Error","App","RoutePath","items","setItems","setIsLoaded","getQuizId","history","useHistory","event","ctrlKey","key","document","quizAPI","res","json","catch","submitQuiz","is_show_feedback","exact","path","detail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb4334c5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst ConfirmationModal = ({ isOpen, toggle, onClick }) => {\n  return (\n    <Modal\n    isOpen={isOpen}\n    size=\"lg\"\n    toggle={toggle}\n    className=\"modal-dialog-centered \"\n  >\n    <ModalBody>\n      <h4 className=\"text-primary\">\n        <strong>Are you sure!</strong>\n      </h4>\n      <p>After submitting your work, you cannot making any changes.</p>\n    </ModalBody>\n    <ModalFooter style={{ border: 0 }}>\n      <button\n        type=\"submit\"\n        class=\"btn btn-sm mx-3 modal-button\"\n        onClick={onClick}\n      >\n        Submit\n      </button>\n    </ModalFooter>\n  </Modal>\n  );\n};\n\nConfirmationModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  creatQuizDataAndSubmit: PropTypes.func.isRequired,\n};\n\nConfirmationModal.defaultProps = { isOpen: false, };\n\nexport default ConfirmationModal;\n","import includes from \"lodash/includes\";\nexport const isLocalHosted = includes(window.location.hostname, \"localhost\");\nexport const isStaging = includes(window.location.hostname, \"gradingly.netlify.app\");\nexport const baseUrl = isLocalHosted\n  ? \"http://localhost:8000\"\n  : isStaging ? \"https://staging.gradingly.com\":\"https://app.gradingly.com\";\n\nexport const baseStagingAPI = `${baseUrl}/api`;\n\nexport const getBaseApiUrl = () => baseStagingAPI;\n","import React from \"react\";\n\nexport function Exitbtn({...props}) {\n     return (\n          <a  {...props} class=\"btn btn-lg\" style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\" }}>Exit</a>\n     );\n}\n","import React from 'react';\n\nexport function Level(props){\n    return ( \n        <span  className=\"badge d-flex customized-badge rounded-border even-larger-badge \" > Level:&nbsp; {props.level} </span>\n    )\n      \n      \n}","import React from 'react';\n\nexport function SuggestedTime(props){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Suggested time: {props.time} minutes</span>\n    )\n      \n      \n}","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./SimpleButton.scss\";\nimport cn from \"classname\";\n\nconst SimpleButton = ({ label, ...props }) => {\n  return (\n    <Button className={cn(\"simple-button w-20\")} {...props}>\n      {label}\n    </Button>\n  );\n};\n\nSimpleButton.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default SimpleButton;\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst OpenButton = ({ ...props }) => (\n  <SimpleButton outline color=\"\" label={<strong>Open</strong>} {...props} />\n);\n\nexport default OpenButton;\n","import React from \"react\";\n\nexport function Savebtn(props){\n    return (\n         <button type=\"button\" class=\"btn btn-lg\" style={{ backgroundColor :\"#2f56a1\",color:\"white\",width:\"150px\"}} onClick={props.click}>Save</button>\n    )\n  }\n","import React from \"react\";\n\nconst SubmitButton = ({...props}) => {\n  return (\n    <input\n      type=\"submit\"\n      value=\"Submit\"\n      class=\"btn btn-lg\"\n      style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\"}}\n      {...props}\n    />\n  );\n};\n\nexport default SubmitButton;\n","import React from \"react\";\n\nexport const getDomainUrl = () => `${window.location.origin}`;\n\nexport function Header() {\n  return (\n    <img \n      src={`${getDomainUrl()}/logo1.png`}\n      style={{ width: \"300px\" , marginLeft: \"30px\"}}\n      alt=\"\"\n    />\n  );\n}\n","import React from 'react';\n\nexport function ExerciseType(props) {\n    return (\n        <h4 className=\"heading-color margin-0\"><b>{props.title}</b></h4>\n    )\n\n\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst SimpleModal = ({ isOpen, size, toggle, bodyContent, footerContent }) => {\n  return (\n    <Modal\n      size={size}\n      isOpen={isOpen}\n      toggle={toggle}\n      className=\"modal-dialog-centered \"\n    >\n      <ModalBody>{bodyContent}</ModalBody>\n      <ModalFooter style={{ border: 0 }}>{footerContent}</ModalFooter>\n    </Modal>\n  );\n};\n\nSimpleModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n\nSimpleModal.defaultProps = { isOpen: false, size: \"lg\" };\n\nexport default SimpleModal;\n","import React, { useRef, useLayoutEffect, useState } from \"react\";\nimport Collapse from \"@kunukn/react-collapse\";\nimport { Button } from \"reactstrap\";\n\nexport const getDomainUrl = () => `${window.location.origin}`;\n\nconst QuestionDescription = ({ description, showBtn }) => {\n  const targetRef = useRef();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    actualHeight: 0,\n  });\n\n  useLayoutEffect(() => {\n    setInterval(function(){\n      if (targetRef.current) {\n        setDimensions({\n          width: targetRef.current.offsetWidth,\n          height: targetRef.current.offsetHeight,\n          actualHeight: targetRef.current.getClientRects()[0][\"height\"],\n        });\n      }\n    },500);\n  }, []);\n\n  const toggle = (index) => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"app\">\n      <Collapse\n        isOpen={!isOpen}\n        collapseHeight=\"70px\"\n        className=\"mb-3 app__collapse\"\n        render={(collapseState) => (\n          <div\n            ref={targetRef}\n            className={!isOpen ? \"\" : \"app__content\"}\n            onClick={() => (isOpen ? toggle() : null)}\n          >\n            {description}\n          </div>\n        )}\n      />\n      <div className=\"text-end\">\n        {showBtn && dimensions.actualHeight > 70 ? (\n          <Button\n            size=\"sm\"\n            onClick={() => toggle()}\n            style={{\n              backgroundColor: \"#2f56a1\",\n              color: \"white\",\n              marginBottom: \"3px\",\n            }}\n          >\n            {isOpen ? (\n              <div>\n                <img src={`${getDomainUrl()}/arrowdown.png`} alt=\"\" />\n                Expand\n              </div>\n            ) : (\n              <div>\n                <img src={`${getDomainUrl()}/arrowup.png`} alt=\"\" />\n                Collapse\n              </div>\n            )}\n          </Button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionDescription;\n","import React from \"react\";\n\nexport function QuestionHeading(props) {\n  return (\n    <p class=\"font-size-18 mb-3\">\n      <span className=\"fw-bold me-1 mb-2\">Question:</span> {props.question}{\" \"}\n    </p>\n  );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport { padStart } from \"lodash\";\n\nexport function Timer({\n  totalTimeInSeconds,\n  onStop,\n  localSpentTime,\n  isStopTimer,\n}) {\n  let options = {\n    autoStart: true,\n  };\n  \n  const localTime = new Date();\n  localTime.setSeconds(\n    localTime.getSeconds() +\n      parseInt(localSpentTime)\n  );\n\n  if (localTime) {\n    options = { ...options, offsetTimestamp: localTime };\n  }\n  const { seconds, minutes, pause, hours } = useStopwatch(options);\n  let spent_minutes = padStart([`${minutes}`] , [2] , ['0']) ;\n  let spent_seconds = padStart([`${seconds}`] , [2] , ['0']) ;\n  const storeInLocalStorage = useCallback(() => {\n    const timeInSeconds = seconds + minutes * 60 + hours * 60 * 60;\n    if (timeInSeconds >= parseInt(totalTimeInSeconds * 60)) {\n      onStop(timeInSeconds);\n    }\n\n    window.sessionStorage.setItem(\"timer\", timeInSeconds);\n  }, [minutes, seconds, hours, onStop, totalTimeInSeconds]);\n\n  useEffect(() => {\n    storeInLocalStorage();\n  }, [storeInLocalStorage]);\n\n  useEffect(() => {\n    if (isStopTimer) {\n      pause();\n    }\n  }, [isStopTimer, pause]);\n\n  return (\n    <div className=\"inline\">\n      Time: <span>{spent_minutes}</span>:<span>{spent_seconds}</span>{ totalTimeInSeconds ? `/${parseInt(totalTimeInSeconds)} min`: null }\n    </div>\n  );\n}\n","class BaseAPI {\n  constructor(props) {\n    this.props = props;\n  }\n\n  makeHeader = () => {\n    return new Headers({\n      Authorization: `Token ${window.location.pathname.split(\"/\")[2]}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    });\n  };\n  fetchSecure = ({ url }) => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: this.makeHeader(),\n    });\n  };\n\n  postSecure = ({ url, data }) => {\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.makeHeader(),\n      body: JSON.stringify({ ...data }),\n    });\n  };\n}\n\nexport default BaseAPI;\n","import { getBaseApiUrl } from \"./../env\";\nimport BaseAPI from \"./baseAPI\";\nexport const  getStudentid = window.location.pathname.split(\"/\")[3];\n   \nconst getQuizUrl = (quiz_id) => `${getBaseApiUrl()}/quiz/${quiz_id}/?id=${getStudentid}`;\n\nclass API extends BaseAPI {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  get = ({ id }) => {\n    return this.fetchSecure({ url: getQuizUrl(id) });\n  };\n\n  post = ({ id, data }) => {\n    return this.postSecure({ url: getQuizUrl(id), data });\n  };\n}\n\nexport default new API();\n","import React from 'react';\n\nexport default  function SuggestedWords({words}){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Suggested Words: {words} </span>\n    )\n      \n      \n}","import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Col, Row } from \"reactstrap\";\nimport ConfirmationModal from \"../../components/modals/ConfirmationModal\";\nimport get from \"lodash/get\";\nimport { baseUrl } from \"../../libs/env\";\nimport { Exitbtn } from \"../../components/buttons/exitbtn\";\nimport { Level } from \"./../../components/badges/level\";\nimport { SuggestedTime } from \"./../../components/badges/suggested_time\";\nimport OpenButton from \"./../../components/buttons/OpenButton\";\nimport { Savebtn } from \"./../../components/buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\nimport { Header } from \"./../../components/header/header\";\nimport { ExerciseType } from \"./../../components/heading/heading\";\nimport SimpleModal from \"./../../components/modals/SimpleModal\";\nimport QuestionDescription from \"./../../components/question/QuestionDescrption\";\nimport { QuestionHeading } from \"./../../components/question/question_heading\";\nimport { Timer } from \"./../../components/timer/timer\";\nimport { getStudentid } from \"../../libs/api/quiz\";\nimport SuggestedWords from \"./../../components/badges/SuggestedWords\";\nimport { TextArea } from \"./../../components/writting_essay/textarea\";\nimport { Logo } from \"./Logo\";\nimport { size } from \"lodash\";\n\nlet answers;\n\nconst WrittingQuiz = ({ isLoaded, data, onSubmit, isReview }) => {\n  const notify = () =>\n    toast.success(\"Successfully Saved!\", {\n      position: \"top-right\",\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      toastId: 1,\n    });\n\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n  const [isOpenAdditionalResourceModal, setOpenAdditionalResourceModal] =\n    useState(false);\n  const additionalResourceToggle = () =>\n    setOpenAdditionalResourceModal(!isOpenAdditionalResourceModal);\n  const [timer, setTimer] = useState();\n  let [wordsCounter, setWordsCount] = useState(\n    data.answers ? data.answers.split(\" \").length : 0\n  );\n\n  if (data.completed_at) {\n    isReview = true;\n  }\n\n  if (data.answers && data.completed_at === null) {\n    answers = data.answers;\n  }\n  // answers=data.answers && data.completed_at === null ? data.answers : null;\n  const [isStopTimer, setIsStopTimer] = useState(false);\n\n  useEffect(() => {\n    setTimer(\n      data.status === \"New\" || data.time_spent === null\n        ? \"00\"\n        : get(data, \"time_spent\")\n    );\n  }, [data]);\n\n  useEffect(() => {\n    if (isReview !== undefined || data.status !== null) {\n      window.addEventListener(\"beforeunload\", alertUser);\n      return () => {\n        window.removeEventListener(\"beforeunload\", alertUser);\n      };\n    }\n  });\n  const alertUser = (e) => {\n    if (isReview === undefined) {\n      creatQuizDataAndSave();\n      e.preventDefault();\n      e.returnValue = \"\";\n    }\n  };\n\n  const creatQuizDataAndSubmit = () => {\n    const timer = window.sessionStorage.getItem(\"timer\");\n    let quiz_data = {\n      is_submit: true,\n      time_spent: parseInt(timer),\n      answers,\n    };\n    setIsStopTimer(true);\n    onSubmit(quiz_data);\n    setIsStopTimer(false);\n    toggle();\n  };\n  const creatQuizDataAndSave = () => {\n    if (!isReview) {\n      const timer = window.sessionStorage.getItem(\"timer\");\n      let quiz_data = {\n        is_submit: false,\n        time_spent: parseInt(timer),\n        answers,\n      };\n      setIsStopTimer(true);\n      onSubmit(quiz_data);\n      setIsStopTimer(false);\n      notify();\n    }\n  };\n  let words_count, written_text;\n  const onBlur = (e) => {\n    answers = e.target.value;\n  };\n\n  const textarea_change = (e) => {\n    written_text = e.target.value;\n    words_count = written_text.split(\" \").length;\n    if (!written_text) {\n      words_count = 0;\n    }\n    setWordsCount(words_count);\n  };\n\n  const { handleSubmit } = useForm();\n\n  const onFormSubmit = () => {\n    if (wordsCounter < 100 || wordsCounter > 1000) {\n      toast.error(\n        \"Answer length must be between 100 and 1000 words, current words are:\" +\n          wordsCounter,\n        {\n          position: \"top-right\",\n          autoClose: false,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          toastId: 1,\n        }\n      );\n    } else {\n      setModal(!modal);\n    }\n  };\n\n  if (!isLoaded)\n    return <h1 className=\"text-primary text-center\">Loading...</h1>;\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <div className=\"p-md-5\">\n            <Row>\n              <div className=\"col\">\n                <Header />\n              </div>\n              <Col className=\"mt-3 text-end\">\n                <span className=\"p-1 timer-content\">\n                  <b>\n                    {data && timer && (\n                      <Timer\n                      isStopTimer={\n                        data.user_type !== \"School Student\" || isReview\n                          ? true\n                          : isStopTimer\n                      }\n                        totalTimeInSeconds={data.recom_time}\n                        localSpentTime={timer}\n                        onStop={(props) => {\n                          // alert(\"Times up\");\n                          setIsStopTimer(false);\n                          // creatQuizDataAndSubmit();\n                        }}\n                      />\n                    )}\n                  </b>\n                </span>\n              </Col>\n              {data.logo !== null ?\n              <Col className=\"text-end\">\n                <Logo logourl={data.logo}/>\n              </Col>\n              :null}\n            </Row>\n            <div className=\"p-md-5\">\n              <div>\n                <div\n                  className=\"border border-light p-3 row\"\n                  xs=\"1\"\n                  sm=\"1\"\n                  md=\"4\"\n                >\n                  <Col md>\n                    <div class=\"content-align-center\">\n                      <ExerciseType title={data.task_type} />\n                    </div>\n                  </Col>\n\n                  <Col md className=\"center\">\n                    <SuggestedTime time={data.recom_time} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <SuggestedWords words=\"350\" />\n                  </Col>\n                  <Col md className=\"center\">\n                    <div className=\"d-flex\">\n                      <Level\n                        level={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.task_levels,\n                            }}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                </div>\n                <Row className=\"border border-light p-3\">\n                  <Col>\n                    <div class=\"d-flex flex-column\">\n                      <QuestionHeading question={data.prompt_content} />\n                      <QuestionDescription\n                        description={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.html_content,\n                            }}\n                          />\n                        }\n                        showbtn={true}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n                <Row\n                  className={\n                    size(data.additional_resource) <= 0\n                      ? \"\"\n                      : \"p-3 border border-light\"\n                  }\n                >\n                  {size(data.additional_resource) <= 0 ? (\n                    \"\"\n                  ) : (\n                    <div>\n                      <span class=\"font-size-18 mt-3 mb-3\">\n                        <strong> Additional question resource </strong>\n                        <OpenButton\n                          onClick={() =>\n                            setOpenAdditionalResourceModal(\n                              !isOpenAdditionalResourceModal\n                            )\n                          }\n                        />\n                      </span>\n                    </div>\n                  )}\n\n                  <SimpleModal\n                    isOpen={isOpenAdditionalResourceModal}\n                    toggle={additionalResourceToggle}\n                    bodyContent={\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.additional_resource,\n                        }}\n                      />\n                    }\n                    footerContent={\n                      <button\n                        type=\"submit\"\n                        class=\"btn btn-sm mx-3 modal-button\"\n                        onClick={additionalResourceToggle}\n                      >\n                        Close\n                      </button>\n                    }\n                  />\n                </Row>\n                <Row className=\"border border-light p-3\">\n                  <TextArea\n                    defaultValue={\n                      data.completed_at === null ? data.answers : null\n                    }\n                    value={isReview ? data.answers : null}\n                    onchange={textarea_change}\n                    onBlur={onBlur}\n                  />\n                </Row>\n                <Row className=\"border border-light px-3 py-2\">\n                  <span className=\"text-muted\">\n                    {\" \"}\n                    Words: {wordsCounter} words{\" \"}\n                  </span>\n                </Row>\n\n                <Row>\n                  <div class=\"mb-3 mt-3 p-0 m-0\">\n                    {isReview || data.user_type !== \"School Student\" ? null : (\n                      <div class=\"inline float-start\">\n                        <Savebtn click={creatQuizDataAndSave} />\n                        <ToastContainer />\n                      </div>\n                    )}\n                    {data.user_type !== \"School Student\" ||\n                      isReview ? (\n                        <div className=\"row\">\n                        <div className=\"col-8\">\n                        {data && isReview ? (\n                          null\n                          // <div md className=\"mt-3 text-end\">\n                          //   <span className=\"p-1 score-content\">\n                          //     <b>\n                          //       <div className=\"inline\">\n                          //         Score: { Math.floor(data.user_score)} / 100 points (\n                          //         {Math.floor((data.user_score / 100) * 100)}%)\n                          //       </div>\n                          //     </b>\n                          //   </span>\n                          // </div>\n                        ) : null}\n                        </div>\n                        <div className=\"text-end col-4\">\n                          {getStudentid ? (\n                            <Exitbtn\n                              href={`${baseUrl}/school/school_quiz_grading/${getStudentid}`}\n                            />\n                          ) : (\n                            <Exitbtn\n                              onClick={(e) => {\n                                e.preventDefault();\n                                window.close();\n                              }}\n                            />\n                          )}\n                        </div>\n                      </div>\n                    ) : (\n                      <div class=\"inline float-end\">\n                        <SubmitButton />\n                      </div>\n                    )}\n                  </div>\n                </Row>\n              </div>\n\n\n              <div className=\"row\">\n              <div className=\"text-center \">\n                <a\n                  class=\"btn btn-secondary py-1 text-nowrap\"\n                  href={`${baseUrl}/contact`}\n                >\n                  <i class=\"pe-2\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"16\"\n                      height=\"20\"\n                      fill=\"currentColor\"\n                      class=\"bi bi-bug-fill\"\n                      viewBox=\"0 0 16 20\"\n                    >\n                      <path d=\"M4.978.855a.5.5 0 1 0-.956.29l.41 1.352A4.985 4.985 0 0 0 3 6h10a4.985 4.985 0 0 0-1.432-3.503l.41-1.352a.5.5 0 1 0-.956-.29l-.291.956A4.978 4.978 0 0 0 8 1a4.979 4.979 0 0 0-2.731.811l-.29-.956z\" />\n                      <path d=\"M13 6v1H8.5v8.975A5 5 0 0 0 13 11h.5a.5.5 0 0 1 .5.5v.5a.5.5 0 1 0 1 0v-.5a1.5 1.5 0 0 0-1.5-1.5H13V9h1.5a.5.5 0 0 0 0-1H13V7h.5A1.5 1.5 0 0 0 15 5.5V5a.5.5 0 0 0-1 0v.5a.5.5 0 0 1-.5.5H13zm-5.5 9.975V7H3V6h-.5a.5.5 0 0 1-.5-.5V5a.5.5 0 0 0-1 0v.5A1.5 1.5 0 0 0 2.5 7H3v1H1.5a.5.5 0 0 0 0 1H3v1h-.5A1.5 1.5 0 0 0 1 11.5v.5a.5.5 0 1 0 1 0v-.5a.5.5 0 0 1 .5-.5H3a5 5 0 0 0 4.5 4.975z\" />\n                    </svg>\n                  </i>{\" \"}\n                  Report a bug\n                </a>\n              </div>\n            </div>\n\n\n\n\n            </div>\n          </div>\n        </form>\n      </div>\n\n\n\n      <ConfirmationModal\n        isOpen={modal}\n        toggle={toggle}\n        onClick={creatQuizDataAndSubmit}\n      />\n    </div>\n  );\n};\n\nexport default WrittingQuiz;\n","import React from \"react\";\nexport function TextArea({value , onchange  ,...restprops}) {\n  return (\n    <textarea\n      class=\"answer-area\"\n      name=\"answer-submission\"\n      id=\"submission-text\"\n      type=\"text\"\n      value={value}\n      spellcheck=\"false\"\n      data-gramm=\"false\"\n      placeholder=\"Start writing here...\"\n      onChange={onchange}\n      {...restprops}\n    ></textarea>\n  );\n}\n","import React from \"react\";\n\n\nexport function Logo({logourl}) {\n  return (\n    <img \n      src={logourl}\n      height='50px'\n      alt=\"\"\n    />\n  );\n}\n","import React from 'react';\n\nexport function NumberOfQuestions(props){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Number of questions: {props.questions} </span>\n    )\n      \n      \n}","import React from \"react\";\nexport function InputFiled({fieldLength, maxLength, value, name, onblur, ...restProps }) {\n  return (\n    <div class=\"inline-grid mx-1 mb-1\">\n      <input\n        type=\"text\"\n        name={name}\n        value={value}\n        size={fieldLength}\n        maxLength={maxLength}\n        onBlur={onblur}\n        spellcheck=\"false\"\n        autoComplete=\"off\"\n        class=\"form-control-sm form-control-custom-sm\"\n        style={{ borderColor: \"#2f56a1\" }}\n        {...restProps}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Question = ({ counter, title, counterClass, showNumbers ,alignement}) => (\n  <div className=\"d-flex align-items-start\">\n    {showNumbers && <span className={alignement === \"Top\"?\" d-flex align-self-top\": alignement=== \"Center\"? \" d-flex align-self-center\":  \" d-flex align-self-end\"} ><strong  className={counterClass}>{counter} </strong></span>}\n    <span>{title}</span>\n  </div>\n);\n\nexport default Question;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Level } from \"../badges/level\";\nimport { NumberOfQuestions } from \"../badges/number_of_question\";\nimport { SuggestedTime } from \"../badges/suggested_time\";\nimport { Savebtn } from \"../buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\n\nimport { Header } from \"../header/header\";\nimport { ExerciseType } from \"../heading/heading\";\nimport { InputFiled } from \"../input_fields/input_field\";\nimport Question from \"../question/question\";\nimport { QuestionHeading } from \"../question/question_heading\";\nimport { Timer } from \"../timer/timer\";\n\nexport function FillInBlanks() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <Container className=\"dashboard-wrapper container-fluid pg-content bg-white  p-md-5 p-3\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row>\n          <Header />\n        </Row>\n\n        <Row className=\"border border-light mt-3 mb-3\" xs=\"1\" sm=\"2\" md=\"4\">\n          <Col>\n            <div class=\"content-align-center\">\n              <ExerciseType title=\"Grammar exercise\" />\n            </div>\n          </Col>\n          <Col>\n            <SuggestedTime time=\"10\" />\n          </Col>\n          <Col>\n            <NumberOfQuestions questions=\"2\" />\n          </Col>\n          <Col>\n            <Level level=\"B2 (CERF)\" />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <QuestionHeading question=\"Read the dialouges. Complete them with i'm, i'm not, are, aren't, is or isn't\" />\n          </Col>\n        </Row>\n        <Row className=\"border border-light font-size-18\">\n          <div class=\"row mb-3  \">\n            <Question question_counter=\"A.\" question_title=\"Are you mexican?\" />\n          </div>\n          <div class=\"d-flex flex-row bd-highlight mb-3\">\n            <div class=\"bd-highlight\">\n              <Question question_counter=\"B.\" question_title=\"No, \" />\n            </div>\n            <div class=\"mx-3 bd-highlight\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank1\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank1 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Mexican. \" />\n            </div>\n            <div class=\"mx-3 bd-highlight text-center\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Argentinian. \" />\n            </div>\n          </div>\n          <div class=\"row mb-3  \">\n            <Question question_counter=\"A.\" question_title=\"Are you mexican?\" />\n          </div>\n          <div class=\"d-flex flex-row bd-highlight mb-3\">\n            <div class=\"bd-highlight\">\n              <Question question_counter=\"B.\" question_title=\"No, \" />\n            </div>\n            <div class=\"mx-3 bd-highlight\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank2\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank2 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Mexican. \" />\n            </div>\n            <div class=\"mx-3 bd-highlight text-center\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank3\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank3 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Argentinian. \" />\n            </div>\n          </div>\n        </Row>\n        <Row className=\"border border-light mb-12 \">\n          <div class=\"row mb-3\">\n            <div class=\"col-12 text-end\">\n              {\" \"}\n              <Timer />{\" \"}\n            </div>\n          </div>\n        </Row>\n\n        <Row>\n          <div class=\"mb-3\">\n            <div class=\"inline float-start\">\n              <Savebtn />\n            </div>\n            <div class=\"inline float-end\">\n              <SubmitButton />\n            </div>\n          </div>\n        </Row>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nexport function Review() {\n     return (\n          <button type=\"button\" class=\"btn btn-lg\" style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\" }}>Review</button>\n     );\n}\n","import React from \"react\";\nimport { Container, Row } from \"reactstrap\";\nimport { Header } from \"../header/header\";\nimport { Exitbtn } from \"../buttons/exitbtn\";\nimport { Review } from \"../buttons/Review\";\n\nexport default function QuizSubmit({ isLoaded, data }) {\n  console.log(data);\n  if (!isLoaded)\n  {\n    return <h1 className=\"text-center\">Loading...</h1>;\n  }\n  else{\n\n  \n  return (\n    <Container className=\"dashboard-wrapper mb-3 mt-3 container-fluid pg-content bg-white  p-md-5 p-3\">\n      <Row className=\"mb-3\">\n        <Header />\n      </Row>\n      <Row className=\"text-center\">\n        <p className=\"text-primary\">\n          <h4>Your Quiz is submitted successfully!</h4>\n        </p>\n      </Row>\n      <Row>\n        <div class=\"mb-3 mt-3 p-0 m-0\">\n          <div class=\"inline float-start\">\n            <Exitbtn />\n          </div>\n          <div class=\"inline float-end\">\n            <Review />\n          </div>\n        </div>\n      </Row>\n    </Container>\n  );\n}\n}\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst BackButton = ({...props}) => (\n  <SimpleButton\n    outline\n    type=\"button\"\n    className=\"btn btn-lg\"\n    style={{ backgroundColor: \"#2f56a1\", color: \"white\" }}\n    label=\"Back\"\n    {...props}\n  />\n);\n\nexport default BackButton;\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst NextButton = ({...props}) => (\n  <SimpleButton\n    outline\n    type=\"button\"\n    className=\"btn btn-lg\"\n    style={{ backgroundColor: \"#2f56a1\", color: \"white\" }}\n    label=\"Next\"\n    {...props}\n  />\n);\n\nexport default NextButton;\n","import React from \"react\";\nexport function AudioPlayer(props) {\n    return (\n        <audio controls controlsList=\"nodownload\">\n            <source src={props.src} type={props.type} />\n        </audio>\n    )\n}","import { toast } from \"react-toastify\";\nexport const notify = (message, autoClose = 3000) =>\n  toast.success(message, {\n    position: \"top-right\",\n    autoClose: autoClose,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    toastId: 1,\n  });\n","import { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    const handleData = e => {\n      setAudioURL(URL.createObjectURL(e.data));\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\nexport default useRecorder;\n","import * as React from \"react\";\nimport useRecorder from \"./useRecorder\";\n\nexport const Speaking = ({ speakingUrl }) => {\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n  speakingUrl(audioURL);\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-3\">\n        <button\n          type=\"button\"\n          onClick={!isRecording ? startRecording : stopRecording}\n          class={\n            !isRecording\n              ? \"btn btn-outline-dark btn-lg px-0 py-1\"\n              : \"btn btn-outline-danger btn-lg px-0 py-1\"\n          }\n        >\n          <div>\n            <span className=\"text-start pe-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                fill={!isRecording ? \"#02b56b\" : \"#ee3b3b\"}\n                class=\"bi bi-mic-fill\"\n                viewBox=\"0 0 16 20\"\n              >\n                <path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\" />\n                <path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\" />\n              </svg>\n            </span>\n            <b className=\"text-end pe-5\"> {!isRecording ? \"Start\" : \"Stop\"} </b>\n          </div>\n        </button>\n      </div>\n      <div className=\"col-12\">\n        <audio src={audioURL} controls controlsList=\"nodownload\" />\n      </div>\n    </div>\n  );\n};\n","import { React } from \"react\";\n\nexport function CheckBox({ onBlur, name, checked, id, value, index, ...restProps }) {\n  return (\n      <span>\n        <input\n          name={name}\n          onBlur={onBlur}\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          id={id}\n          checked={checked}\n          value={value}\n          {...restProps}\n        />\n      </span>\n  );\n}\n","import React from \"react\";\n\nexport function Label(props) {\n    return (\n        <label class=\"d-flex inline\" for={props.for}>{props.label}</label>\n    )\n}","import React from \"react\";\n\nexport function Radio({ name, onBlur, id, checked, value,index,...restProps }) {\n  return (\n    \n      <span>\n        <input\n          onBlur={onBlur}\n          name={name}\n          class=\"form-check-input\"\n          id={id}\n          type=\"radio\"\n          checked={checked}\n          value={value}\n          {...restProps}\n        />\n      </span>\n   \n  );\n}\n","export const selectQuestionCounterOrCharacter = ({\n  show_abc_sequence,\n  index,\n}) => {\n  const alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  return show_abc_sequence ? alphabet[index] : index + 1;\n};\n\nexport const isInUserSelectedAnswers = (question, possible_answers_id) => {\n  let user_selected_id = [];\n  if (question.user_selected) {\n    question.user_selected.forEach(element => {\n      user_selected_id.push(element.id)\n    }); \n  }\n  return question && user_selected_id && user_selected_id.includes(possible_answers_id);\n};\n","import React from \"react\";\nexport function CorrectAnswer(props) {\n  return (\n    <span class={props.class}>\n      <img src=\"/correct.png\" width=\"17px\" alt=\"\" />\n    </span>\n  );\n}\n","import React from \"react\";\nexport function WrongAnswer(props) {\n  return (\n    <span class={props.class}>\n      <img src=\"/wrong.png\" width=\"17px\" alt=\"\" />\n    </span>\n  );\n}\n","import React from \"react\";\nexport function Answer({badgeclass , value, ...restprops}){\n    return(\n        <span {...restprops} className={badgeclass}>{value}</span>\n    );\n}","import React from \"react\";\n\nexport function SelectChoice({ choices = [], onblur, isReview , id,...restprops }) {\n  \n  return (\n    <div className=\"d-inline-flex mx-1 mb-1\">\n      <select\n       \n        className=\"form-select\"\n        style={{\n          borderColor: \"#2f56a1\",\n          backgroundImage: \"url('/arrow-down.png')\"\n        }}\n        onBlur={onblur}\n        {...restprops}\n      >\n        {isReview ? null :  <option selected>select answer</option>}\n        {choices &&\n          choices.map((choice, index) => (\n            <option key={choice.number} data-possible-question-id={choice.id} selected={id === choice.id ? true : false}>\n              {choice.prompt_content.replaceAll(/(<([^>]+)>)/gi, \"\")}\n            </option>\n          ))}\n        ;\n      </select>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { CheckBox } from \"./../../components/checkbox/checkbox\";\nimport { Label } from \"./../../components/checkbox/label\";\nimport Question from \"./../../components/question/question\";\nimport { Radio } from \"./../../components/radio_buutons/radio\";\nimport { selectQuestionCounterOrCharacter } from \"./QuizRunner.helpers\";\nimport PropTypes from \"prop-types\";\nimport { CorrectAnswer } from \"../../components/answers/correct_answer\";\nimport { InputFiled } from \"../../components/input_fields/input_field\";\nimport { WrongAnswer } from \"../../components/answers/wrong_answer\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { isInUserSelectedAnswers } from \"./QuizRunner.helpers\";\nimport { size } from \"lodash\";\nimport { Answer } from \"../../components/answers/badge/answer\";\nimport { SelectChoice } from \"../../components/drop_down/SelectChoice\";\n\nfunction ShowQuestions({\n  questions,\n  onAnswer,\n  currentPage,\n  isReview,\n  answer,\n  status,\n}) {\n  let inputFiledLength = [];\n  let checkflag = false;\n  const [currentQuestion, setCurrentQuestion] = useState(currentPage);\n\n  useEffect(() => {\n    setCurrentQuestion(currentPage);\n  }, [currentPage]);\n\n  let isShowNumbering = size(questions) > 1;\n  let fieldNumber , fieldlenght = 0;\n\n  return (\n    <div>\n      {questions &&\n        questions.map((question, qai) => {\n          if (\n            isReview ||\n            status === null ||\n            parseInt(currentQuestion) === parseInt(question.page)\n          ) {\n            question.prompt_content.replace(\n              /\\[\\[[^\\]]*\\]\\]\\*([\\d]+)/g,\n              function replacer(matched) {\n                matched.replace(/\\[\\[[^\\]]*\\]\\]/g, function replace(match) {\n                  fieldNumber = match.match(/\\d+/)\n                 \n                });\n                matched.replace(/\\*([\\d]+)/g, function replacer(matched) {\n                  fieldlenght = matched.match(/\\d+/)\n                });\n                inputFiledLength.push({questionNumber : question.id,fieldNumber :  fieldNumber[0], fieldlenght: fieldlenght[0]});\n              }\n            );\n            const trimedString = question.prompt_content.replace(\n              /(<|&lt;)br\\s*\\/*(>|&gt;)/g,\n              \" \"\n            );\n            const converted = trimedString.replace(\n              /\\[\\[[^\\]]*\\]\\]/g,\n              function replacer(matched) {\n                return question.type === \"FillInBlank\"\n                  ? `<input type=\"text\" className=\"form-control-sm\" data-id =\"${matched.match(\n                      /\\d+/\n                    )}\"  class=\"inline\"/>`\n                  : `<select data-id =\"${matched.match(\n                      /\\d+/\n                    )}\"  class=\"inline\"></select>`;\n              }\n            );\n\n            return (\n              <div className=\"mb-3\" key={qai}>\n                <div className=\"icon-wrapper\">\n                  <Question\n                    // counterClass={getCounterCls(converted)}\n                    showNumbers={isShowNumbering}\n                    counterClass=\"me-2\"\n                    counter={qai + 1 + \".\"}\n                    alignement = {question.question_alignment}\n                    title={ReactHtmlParser(converted.replace(/\\*([\\d]+)/g,''), {\n                      transform: (node) => {\n                        if (node.name === \"input\") {\n                          let user_answer = \"\";\n                          answer.forEach((ans) => {\n                            if (ans.question_id === question.id) {\n                              ans.selected_answers.forEach((sel_ans) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  sel_ans[\"number\"]\n                                ) {\n                                  user_answer = sel_ans[\"answer\"];\n                                }\n                              });\n                            }\n                          });\n                          let given_answer;\n                          let corrent_answer;\n                          if (isReview) {\n                            if (question.user_selected) {\n                              question.user_selected.forEach(\n                                (user_selected) => {\n                                  if (\n                                    parseInt(node.attribs[\"data-id\"]) ===\n                                    user_selected.number\n                                  ) {\n                                    given_answer = user_selected[\"answer\"];\n                                  }\n                                }\n                              );\n                            }\n\n                            question.possible_answers.forEach(\n                              (possible_answer) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  possible_answer.number\n                                ) {\n                                  corrent_answer =\n                                    possible_answer.prompt_content;\n                                }\n                              }\n                            );\n                          }\n                          let inputLenght = 0;\n                          inputFiledLength.forEach((input_field_length)=>{\n                              if (node.attribs[\"data-id\"] === input_field_length.fieldNumber && input_field_length.questionNumber === question.id ) {\n                                inputLenght=input_field_length.fieldlenght;\n                              }\n                          });\n                          return (\n                            <div class=\"inline-grid icon-wrapper\">\n                              <InputFiled\n                                fieldLength={inputLenght === 0 ? question.input_field_length : inputLenght}\n                                disabled={isReview}\n                                data-question-type={question.type}\n                                data-value={node.attribs[\"data-id\"]}\n                                data-question-id={question.id}\n                                value={isReview ? given_answer : null}\n                                defaultValue={user_answer ? user_answer : null}\n                                onblur={onAnswer}\n                                maxLength={question.input_field_characters_limit}\n                                className={\n                                  corrent_answer === given_answer\n                                    ? \"form-control-sm form-control-custom-sm\"\n                                    : \"txt-danger-line-through form-control-sm form-control-custom-sm\"\n                                }\n                              />\n\n                              {isReview ? (\n                                corrent_answer === given_answer ? (\n                                  <CorrectAnswer class=\"answer-badge bg-success\" />\n                                ) : (\n                                  <WrongAnswer class=\"answer-badge bg-danger\" />\n                                )\n                              ) : null}\n                              {isReview ? (\n                                corrent_answer === given_answer ? null : (\n                                  <Answer\n                                    class=\"badge bg-success mb-1\"\n                                    value={corrent_answer}\n                                  />\n                                )\n                              ) : null}\n                            </div>\n                          );\n                        } else if (node.name === \"select\") {\n                          let user_answer;\n                          answer.forEach((ans) => {\n                            if (ans.question_id === question.id) {\n                              ans.selected_answers.forEach((sel_ans) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  sel_ans[\"number\"]\n                                ) {\n                                  user_answer = sel_ans[\"id\"];\n                                }\n                              });\n                            }\n                          });\n                          let question_answer_number = [];\n                          let dropdown_corrent_answer;\n\n                          let question_flag;\n                          if (isReview) {\n                            question.possible_answers.forEach(\n                              (possible_answer) => {\n                                if (\n                                  possible_answer.number ===\n                                    parseInt(node.attribs[\"data-id\"]) &&\n                                  possible_answer.is_correct\n                                ) {\n                                  dropdown_corrent_answer =\n                                    possible_answer.prompt_content.replaceAll(\n                                      /(<([^>]+)>)/gi,\n                                      \"\"\n                                    );\n                                }\n                              }\n                            );\n                          }\n                          if (isReview && question.user_selected) {\n                            question.user_selected.forEach((user_selected) => {\n                              if (\n                                parseInt(node.attribs[\"data-id\"]) ===\n                                user_selected.number\n                              ) {\n                                question.possible_answers.forEach(\n                                  (possible_answer) => {\n                                    if (\n                                      possible_answer.number ===\n                                        user_selected.number &&\n                                      possible_answer.id === user_selected.id\n                                    ) {\n                                      question_answer_number.push(\n                                        possible_answer\n                                      );\n\n                                      question_flag =\n                                        possible_answer.is_correct;\n                                    }\n                                  }\n                                );\n                              }\n                            });\n                          } else if (isReview === false) {\n                            question.possible_answers.forEach(\n                              (question_number) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  question_number.number\n                                ) {\n                                  question_answer_number.push(question_number);\n                                }\n                              }\n                            );\n                          }\n                          return (\n                            <div class=\"inline-grid icon-wrapper\">\n                              <SelectChoice\n                                id={user_answer}\n                                disabled={isReview}\n                                data-question-type={question.type}\n                                data-value={node.attribs[\"data-id\"]}\n                                data-question-id={question.id}\n                                placeholder_id={node.attribs[\"data-id\"]}\n                                choices={question_answer_number}\n                                onblur={onAnswer}\n                                isReview={isReview}\n                                className={\n                                  question_flag === false\n                                    ? \"txt-danger-line-through form-select form-select-custom-sm\"\n                                    : \"form-select form-select-custom-sm\"\n                                }\n                              />\n                              {isReview ? (\n                                question_flag === true ? (\n                                  <CorrectAnswer class=\"answer-badge bg-success\" />\n                                ) : (\n                                  <WrongAnswer class=\"answer-badge bg-danger\" />\n                                )\n                              ) : null}\n                              {isReview ? (\n                                question_flag === true ? null : (\n                                  <Answer\n                                    class=\"badge bg-success mb-1\"\n                                    value={dropdown_corrent_answer}\n                                  />\n                                )\n                              ) : null}\n                            </div>\n                          );\n                        }\n                      },\n                    })}\n                  />\n                  {question.type === \"RadioBox\" ||\n                  question.type === \"CheckBox\" ? (\n                    <div\n                      className={\n                        question.question_horizontal_display\n                          ? \"row d-inline-flex  align-items-end \"\n                          : null\n                      }\n                    >\n                      {question.possible_answers.map(\n                        (possible_answers, pai) => (\n                          <div\n                            className={\n                              question.type === \"RadioBox\" ||\n                              question.type === \"CheckBox\"\n                                ? question.question_horizontal_display\n                                  ? \"d-flex mt-2 ms-3 inline-grid col\"\n                                  : \"d-flex mt-2 ms-3\"\n                                : null\n                            }\n                          >\n                            <label for={possible_answers.id}>\n                              {possible_answers.image &&\n                              question.question_horizontal_display ? (\n                                <img\n                                  src={possible_answers.image}\n                                  height={possible_answers.image_height}\n                                  px\n                                  alt=\"img\"\n                                />\n                              ) : (\n                                \"\"\n                              )}\n                            </label>\n                            <div\n                              className={\n                                question.type === \"RadioBox\" ||\n                                question.type === \"CheckBox\"\n                                  ? \"form-check d-flex align-items-center form-check-inline custom-form-check\"\n                                  : null\n                              }\n                            >\n                              {answer.forEach((ans) => {\n                                if (ans.question_id === question.id) {\n                                  ans.selected_answers.forEach((sel_ans) => {\n                                    if (possible_answers.id === sel_ans[\"id\"]) {\n                                      checkflag = true;\n                                    }\n                                  });\n                                }\n                              })}\n                              <span>\n                                {selectQuestionCounterOrCharacter({\n                                  index: pai,\n                                  show_abc_sequence: question.show_abc_sequence,\n                                }) + \".\"}\n                              </span>\n                              {question.type === \"CheckBox\" ? (\n                                <CheckBox\n                                  defaultChecked={\n                                    checkflag === true ? checkflag : null\n                                  }\n                                  index={\n                                    selectQuestionCounterOrCharacter({\n                                      index: pai,\n                                      show_abc_sequence:\n                                        question.show_abc_sequence,\n                                    }) + \".\"\n                                  }\n                                  data-question-id={question.id}\n                                  data-question-type={question.type}\n                                  onClick={onAnswer}\n                                  value={possible_answers.id}\n                                  id={possible_answers.id}\n                                  name={`answers[${qai}].selected_answers[${pai}]`}\n                                  checked={\n                                    isReview\n                                      ? isInUserSelectedAnswers(\n                                          question,\n                                          possible_answers.id\n                                        )\n                                      : null\n                                  }\n                                  className={\n                                    isReview &&\n                                    !isInUserSelectedAnswers(\n                                      question,\n                                      possible_answers.id\n                                    ) &&\n                                    possible_answers.is_correct\n                                      ? \"form-check-input correct_answers ms-2\"\n                                      : \"form-check-input ms-2\"\n                                  }\n                                />\n                              ) : question.type === \"RadioBox\" ? (\n                                <Radio\n                                  defaultChecked={\n                                    checkflag === true ? checkflag : null\n                                  }\n                                  index={\n                                    selectQuestionCounterOrCharacter({\n                                      index: pai,\n                                      show_abc_sequence:\n                                        question.show_abc_sequence,\n                                    }) + \".\"\n                                  }\n                                  data-question-id={question.id}\n                                  data-question-type={question.type}\n                                  onClick={onAnswer}\n                                  value={possible_answers.id}\n                                  id={possible_answers.id}\n                                  name={`answers[${qai}].selected_answers`}\n                                  checked={\n                                    isReview\n                                      ? isInUserSelectedAnswers(\n                                          question,\n                                          possible_answers.id\n                                        )\n                                      : null\n                                  }\n                                  className={\n                                    isReview &&\n                                    !isInUserSelectedAnswers(\n                                      question,\n                                      possible_answers.id\n                                    ) &&\n                                    possible_answers.is_correct\n                                      ? \"form-check-input correct_answers ms-2\"\n                                      : \"form-check-input ms-2\"\n                                  }\n                                />\n                              ) : null}\n                              {(checkflag = false)}\n                              <div\n                                class={\n                                  question.type === \"RadioBox\" ||\n                                  question.type === \"CheckBox\"\n                                    ? \"icon-wrapper\"\n                                    : null\n                                }\n                              >\n                                {question.type === \"RadioBox\" ||\n                                question.type === \"CheckBox\" ? (\n                                  <Label\n                                    for={possible_answers.id}\n                                    label={\n                                      <div\n                                        dangerouslySetInnerHTML={{\n                                          __html: `${\n                                            possible_answers.prompt_content\n                                              ? possible_answers.prompt_content\n                                              : \"\"\n                                          } ${\n                                            possible_answers.image &&\n                                            !question.question_horizontal_display\n                                              ? `<img src=${possible_answers.image} height=${possible_answers.image_height}px/>`\n                                              : \"\"\n                                          }`,\n                                        }}\n                                      />\n                                    }\n                                  />\n                                ) : null}\n                                {possible_answers.is_correct === true &&\n                                  isReview === true &&\n                                  (question.type === \"CheckBox\" ||\n                                    question.type === \"RadioBox\") &&\n                                  isInUserSelectedAnswers(\n                                    question,\n                                    possible_answers.id\n                                  ) && (\n                                    <CorrectAnswer class=\"answer-badge bg-success\" />\n                                  )}\n\n                                {possible_answers.is_correct === false &&\n                                  isReview === true &&\n                                  (question.type === \"CheckBox\" ||\n                                    question.type === \"RadioBox\") &&\n                                  isInUserSelectedAnswers(\n                                    question,\n                                    possible_answers.id\n                                  ) && (\n                                    <WrongAnswer class=\"answer-badge bg-danger\" />\n                                  )}\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        })}\n    </div>\n  );\n}\n\nShowQuestions.defaultProps = {\n  questions: [],\n  currentQuestion: 1,\n  isReview: false,\n};\n\nShowQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n  onAnswer: PropTypes.func.isRequired,\n  currentQuestion: PropTypes.number.isRequired,\n  isReview: PropTypes.bool,\n};\nexport default ShowQuestions;\n","import { remove, size } from \"lodash\";\nimport find from \"lodash/find\";\nimport get from \"lodash/get\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { baseUrl } from \"../../libs/env\";\nimport { Col, Modal, ModalBody, ModalFooter, Row } from \"reactstrap\";\nimport { Exitbtn } from \"../../components/buttons/exitbtn\";\nimport { Level } from \"./../../components/badges/level\";\nimport { NumberOfQuestions } from \"./../../components/badges/number_of_question\";\nimport { SuggestedTime } from \"./../../components/badges/suggested_time\";\nimport BackButton from \"./../../components/buttons/BackButton\";\nimport NextButton from \"./../../components/buttons/NextButton\";\nimport { AudioPlayer } from \"../../components/listening_exercise/audio_player\";\nimport OpenButton from \"./../../components/buttons/OpenButton\";\nimport { Savebtn } from \"./../../components/buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\nimport { Header } from \"./../../components/header/header\";\nimport { ExerciseType } from \"./../../components/heading/heading\";\nimport SimpleModal from \"./../../components/modals/SimpleModal\";\nimport { includes } from \"lodash\";\nimport { join } from \"lodash\";\nimport { getStudentid } from \"../../libs/api/quiz\";\nimport ConfirmationModal from \"../../components/modals/ConfirmationModal\";\nimport { notify } from \"../../components/notification/Notification\";\nimport QuestionDescription from \"../../components/question/QuestionDescrption\";\nimport { QuestionHeading } from \"./../../components/question/question_heading\";\nimport { Timer } from \"./../../components/timer/timer\";\nimport { Logo } from \"./Logo\";\nimport { Speaking } from \"./speaking\";\n// import { OrderDragDrop } from \"./OrderDragDrop\";\nimport ShowQuestions from \"./ShowQuestions\";\n// import { DragDrop } from \"./DragDrop\";\n\nlet answers = [];\n\nconst QuizRunner = ({ isLoaded, data, onSubmit, isReview }) => {\n  if (data.completed_at != null) {\n    isReview = true;\n  }\n\n  const [modal, setModal] = useState(false);\n  const [speakingUrl, setSpeakingUrl] = useState(\"\");\n  let [showWarning, setShowWarnings] = useState();\n  const [notAnsweredQuestion, setNotAnsweredQuestions] = useState(\"\");\n  const toggle = () => setModal(!modal);\n  const [saveModal, setSaveModal] = useState(false);\n  const [isOpenAdditionalResourceModal, setOpenAdditionalResourceModal] =\n    useState(false);\n\n  const additionalResourceToggle = () =>\n    setOpenAdditionalResourceModal(!isOpenAdditionalResourceModal);\n  const saveToggle = () => setSaveModal(!saveModal);\n  const [isStopTimer, setIsStopTimer] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [questions, setQuestions] = useState([]);\n  const [timer, setTimer] = useState();\n  useEffect(() => {\n    if (\n      data &&\n      data.time_spent &&\n      size(answers) === 0 &&\n      isReview === undefined\n    ) {\n      data.questions.forEach((question_item) => {\n        if (size(question_item.user_selected) !== 0) {\n          answers.push({\n            question_id: question_item.id,\n            selected_answers: question_item[\"user_selected\"],\n          });\n        }\n      });\n    }\n  }, [data, isReview]);\n\n  useEffect(() => {\n    setTimer(\n      data.status === \"New\" || data.time_spent === null\n        ? \"00\"\n        : get(data, \"time_spent\")\n    );\n    setQuestions(get(data, \"questions\"));\n  }, [data]);\n\n  const alertUser = (e) => {\n    if (isReview === undefined) {\n      if (showWarning !== false) {\n        creatQuizDataAndSave();\n        e.preventDefault();\n        e.returnValue = \"\";\n      }\n    }\n  };\n  const creatQuizDataAndSubmit = () => {\n    const timer = window.sessionStorage.getItem(\"timer\");\n    if (speakingUrl !== \"\") {\n      answers = speakingUrl;\n    }\n    let quiz_data = {\n      is_submit: true,\n      time_spent: parseInt(timer),\n      answers,\n    };\n    setIsStopTimer(true);\n    onSubmit(quiz_data);\n    setShowWarnings(false);\n    if (modal === true) {\n      toggle();\n    } else {\n      saveToggle();\n    }\n  };\n  const creatQuizDataAndSave = () => {\n    if (data.user_type === \"School Student\") {\n      const timer = window.sessionStorage.getItem(\"timer\");\n      let quiz_data = {\n        is_submit: false,\n        time_spent: parseInt(timer),\n        answers,\n      };\n\n      setIsStopTimer(false);\n      onSubmit(quiz_data);\n      setIsStopTimer(false);\n      notify(\"Successfully Saved!\");\n    }\n  };\n\n  useEffect(() => {\n    if (isReview === undefined && data.user_type === \"School Student\") {\n      window.addEventListener(\"beforeunload\", alertUser);\n      return () => {\n        window.removeEventListener(\"beforeunload\", alertUser);\n      };\n    }\n  });\n\n  const onblur = (e) => {\n    let question_id = parseInt(e.target.getAttribute(\"data-question-id\"));\n    let question_type = e.target.getAttribute(\"data-question-type\");\n\n    let is_checkbox_checked =\n      question_type === \"CheckBox\" ? e.target.checked : null;\n    let is_radio_checked =\n      question_type === \"RadioBox\" ? e.target.checked : null;\n    let sel_answer = parseInt(e.target.value);\n    if (question_type === \"CheckBox\" || question_type === \"RadioBox\") {\n      if (answers.length === 0) {\n        answers.push({ question_id, selected_answers: [{ id: sel_answer }] });\n      } else {\n        let found_answer = find(answers, [\"question_id\", question_id]);\n        if (found_answer) {\n          let removed_selected_answer_arr = remove(\n            found_answer.selected_answers,\n            (sa_item_id) =>\n              sa_item_id[\"id\"] === sel_answer && is_checkbox_checked === false\n          );\n          if (\n            found_answer.selected_answers.length === 0 &&\n            is_checkbox_checked === false\n          ) {\n            let answer_index = answers.indexOf(found_answer);\n            remove(\n              answers,\n              (answer_item_id) =>\n                answers.indexOf(answer_item_id) === answer_index &&\n                is_checkbox_checked === false\n            );\n          }\n          if (removed_selected_answer_arr.length === 0 && is_checkbox_checked) {\n            found_answer.selected_answers.push({ id: sel_answer });\n          }\n          if (is_radio_checked === true) {\n            found_answer.selected_answers = [];\n            found_answer.selected_answers.push({ id: sel_answer });\n          }\n        } else {\n          answers.push({ question_id, selected_answers: [{ id: sel_answer }] });\n        }\n      }\n    } else if (question_type === \"FillInBlank\") {\n      if (e.target.value) {\n        let answer = e.target.value;\n        let question_number = parseInt(e.target.getAttribute(\"data-value\"));\n        if (answers.length === 0) {\n          answers.push({\n            question_id,\n            selected_answers: [{ number: question_number, answer: answer }],\n          });\n        } else {\n          let found_answer = find(answers, [\"question_id\", question_id]);\n          if (found_answer) {\n            let found_selected_answer = find(found_answer.selected_answers, [\n              \"number\",\n              question_number,\n            ]);\n            if (found_selected_answer) {\n              found_selected_answer[\"answer\"] = answer;\n            } else {\n              found_answer.selected_answers.push({\n                number: question_number,\n                answer: answer,\n              });\n            }\n          } else {\n            answers.push({\n              question_id,\n              selected_answers: [{ number: question_number, answer: answer }],\n            });\n          }\n        }\n      }\n    } else if (question_type === \"FillInBlankChoices\") {\n      let answer = parseInt(\n        e.target.selectedOptions[0].getAttribute(\"data-possible-question-id\")\n      );\n      let question_number = parseInt(e.target.getAttribute(\"data-value\"));\n      if (answers.length === 0) {\n        answers.push({\n          question_id,\n          selected_answers: [{ number: question_number, id: answer }],\n        });\n      } else {\n        let found_answer = find(answers, [\"question_id\", question_id]);\n        if (found_answer) {\n          let found_selected_answer = find(found_answer.selected_answers, [\n            \"number\",\n            question_number,\n          ]);\n          if (found_selected_answer) {\n            found_selected_answer[\"id\"] = answer;\n          } else {\n            found_answer.selected_answers.push({\n              number: question_number,\n              id: answer,\n            });\n          }\n        } else {\n          answers.push({\n            question_id,\n            selected_answers: [{ number: question_number, id: answer }],\n          });\n        }\n      }\n    }\n    console.log(\"answers\", answers);\n  };\n\n  const { handleSubmit } = useForm();\n\n  const onFormSubmit = () => {\n    console.log(speakingUrl);\n    let answeredQuestion = [];\n    let notAnswered = [];\n    let ans = [];\n    let fields;\n    answers.forEach((answer) => {\n      let selectdAnswers = [];\n      answeredQuestion.push(answer.question_id);\n      answer.selected_answers.forEach((sel_answer) => {\n        selectdAnswers.push(sel_answer.answer);\n      });\n      ans.push({ question_id: answer.question_id, selectdAnswers });\n    });\n\n    data.questions.forEach((question, i) => {\n      let noOfFilelds = [];\n      if (includes(answeredQuestion, question.id) === false) {\n        notAnswered.push(i + 1);\n      } else {\n        if (\n          question.type === \"FillInBlankChoices\" ||\n          question.type === \"FillInBlank\"\n        ) {\n          question.prompt_content.replace(\n            /\\[\\[[^\\]]*\\]\\]/g,\n            function replacer(matched) {\n              let fieldNumber = `${matched.match(/\\d+/)}`;\n              noOfFilelds.push(fieldNumber);\n            }\n          );\n          fields = size(noOfFilelds);\n\n          ans.forEach((sel) => {\n            if (sel.question_id === question.id) {\n              if (parseInt(fields) !== size(sel.selectdAnswers)) {\n                notAnswered.push(i + 1);\n              }\n            }\n          });\n        }\n      }\n    });\n    if (size(notAnswered) > 0) {\n      setNotAnsweredQuestions(join(notAnswered, \",\"));\n      setModal(!modal);\n    } else {\n      setSaveModal(!saveModal);\n    }\n  };\n  if (!isLoaded)\n    return (\n      <div class=\"centered  text-light fs-4\">\n        <div class=\"spinner-border h-w-100\" role=\"status\"></div>\n      </div>\n    );\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <div className=\"p-md-5\">\n          \n            <Row>\n              <Col sm>\n                <Header />\n              </Col>\n              <Col md className=\"mt-3 text-end\">\n                <span className=\"p-1 timer-content\">\n                  <b>\n                    {data && timer && (\n                      <Timer\n                        isStopTimer={\n                          data.user_type !== \"School Student\" || isReview\n                            ? true\n                            : isStopTimer\n                        }\n                        totalTimeInSeconds={data.recom_time}\n                        localSpentTime={timer}\n                        onStop={(props) => {\n                          // alert(\"Times up\");\n                          setIsStopTimer(false);\n                          // creatQuizDataAndSubmit();\n                        }}\n                      />\n                    )}\n                  </b>\n                </span>\n              </Col>\n              {data.logo !== null ?\n              <Col md className=\"text-end\">\n                <Logo logourl={data.logo}/>\n              </Col>\n              :null}\n            </Row>\n            <div className=\"p-md-5\">\n              <div>\n                <div\n                  className=\"border border-light p-3 row\"\n                  xs=\"1\"\n                  sm=\"1\"\n                  md=\"4\"\n                >\n                  <Col md>\n                    <div class=\"content-align-center\">\n                      <ExerciseType title={data.task_type} />\n                    </div>\n                  </Col>\n\n                  <Col md className=\"center\">\n                    <SuggestedTime time={data.recom_time} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <NumberOfQuestions questions={size(data.questions)} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <div className=\"d-flex\">\n                      <Level\n                        level={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.task_levels,\n                            }}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                </div>\n                <Row className=\"border border-light p-3\">\n                  <Col>\n                    <div class=\"d-flex flex-column\">\n                      <QuestionHeading question={data.prompt_content} />\n                      {data.audio ? (\n                        <div className=\"mb-3\">\n                          {\" \"}\n                          <AudioPlayer src={data.audio} />{\" \"}\n                        </div>\n                      ) : null}\n                      {data.html_content && (\n                        <QuestionDescription\n                          description={\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: data.html_content,\n                              }}\n                            />\n                          }\n                          showBtn={true}\n                        />\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n                <Row\n                  className={\n                    size(data.additional_resource) <= 0\n                      ? \"\"\n                      : \"p-3 border border-light\"\n                  }\n                >\n                  {size(data.additional_resource) <= 0 ? (\n                    \"\"\n                  ) : (\n                    <div>\n                      <span class=\"mt-3 mb-3\">\n                        <strong> Additional question resource </strong>\n                        <OpenButton\n                          onClick={() =>\n                            setOpenAdditionalResourceModal(\n                              !isOpenAdditionalResourceModal\n                            )\n                          }\n                        />\n                      </span>\n                    </div>\n                  )}\n\n                  <SimpleModal\n                    isOpen={isOpenAdditionalResourceModal}\n                    toggle={additionalResourceToggle}\n                    bodyContent={\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.additional_resource,\n                        }}\n                      />\n                    }\n                    footerContent={\n                      <button\n                        type=\"submit\"\n                        class=\"btn btn-sm mx-3 modal-button\"\n                        onClick={additionalResourceToggle}\n                      >\n                        Close\n                      </button>\n                    }\n                  />\n                </Row>\n                <Row className=\"border border-light p-3\">\n                  { data.task_type === \"Speaking Task\" ? <Speaking speakingUrl={setSpeakingUrl}/> :\n                  <div className=\"d-flex\">\n                    <ShowQuestions\n                      questions={questions}\n                      currentPage={currentPage}\n                      onAnswer={onblur}\n                      isReview={isReview}\n                      answer={answers}\n                      status={data.status}\n                    />\n                     {/* <OrderDragDrop/> */}\n                     {/* <DragDrop/> */}\n                  </div>\n                }\n                </Row>\n                {\n                  isReview || data.total_pages === 1 ? null : \"\"\n                  // <>\n                  //   <Row className=\"border border-light mb-12\">\n                  //     <div class=\"row\">\n                  //       <div class=\"col-12 text-center\">\n                  //         <BookMarkButton />\n                  //       </div>\n                  //     </div>\n                  //   </Row>\n\n                  //   <Row>\n                  //     <div class=\"p-4 mb-3 jumptron shadow-4 rounded-3\">\n                  //       <p class=\"text-center\">\n                  //         Part {currentPage}/{data.total_pages}\n                  //       </p>\n                  //       <div className=\"d-flex justify-content-center\">\n                  //         {[...Array(data.total_pages)].map((data, i) => (\n                  //           <PartBar\n                  //             currentPage={i + 1}\n                  //             className=\"part-bar success-border flex-fill bd-highlight\"\n                  //             onClick={(props) => setCurrentPage(props)}\n                  //           />\n                  //         ))}\n                  //       </div>\n                  //     </div>\n                  //   </Row>\n                  // </>\n                }\n\n                <Row>\n                  <div class=\"mb-3 mt-3 p-0 m-0\">\n                    {isReview || data.user_type !== \"School Student\" ? null : (\n                      <div class=\"inline float-start\">\n                        {data.task_type !== \"Speaking Task\" ? (\n                          <>\n                            <Savebtn click={creatQuizDataAndSave} />\n                            <ToastContainer />\n                          </>\n                        ) : null}\n                      </div>\n                    )}\n                    {isReview ||\n                    (data.user_type === \"School Student\" &&\n                      data.completed_at) ||\n                    data.user_type === \"School Account\" ? (\n                      <div className=\"row\">\n                        <div className=\"col-md-8 col-12\" >\n                        <div className=\"inline-grid float-end\">\n                          {data.user_score !== null && data.user_type !== \"STAFF\" && isReview ? (\n                            <div md className=\"mt-3 text-end\">\n                              <span className=\"p-1 score-content\">\n                                <b>\n                                  <div className=\"inline\">\n                                    Score: {Math.floor(data.user_score)} / 100\n                                    points (\n                                    {Math.floor((data.user_score / 100) * 100)}\n                                    %)\n                                  </div>\n                                </b>\n                              </span>\n                            </div>\n                          ) : null}\n\n\n\n\n\n                           \n                            <div className=\"pe-4 mt-3 text-center\">\n                              <a\n                                class=\"btn btn-secondary py-1 text-nowrap\"\n                                href={`${baseUrl}/contact`}\n                              >\n                                <i class=\"pe-2\">\n                                  <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    width=\"16\"\n                                    height=\"20\"\n                                    fill=\"currentColor\"\n                                    class=\"bi bi-bug-fill\"\n                                    viewBox=\"0 0 16 20\"\n                                      >\n                                        <path d=\"M4.978.855a.5.5 0 1 0-.956.29l.41 1.352A4.985 4.985 0 0 0 3 6h10a4.985 4.985 0 0 0-1.432-3.503l.41-1.352a.5.5 0 1 0-.956-.29l-.291.956A4.978 4.978 0 0 0 8 1a4.979 4.979 0 0 0-2.731.811l-.29-.956z\" />\n                                        <path d=\"M13 6v1H8.5v8.975A5 5 0 0 0 13 11h.5a.5.5 0 0 1 .5.5v.5a.5.5 0 1 0 1 0v-.5a1.5 1.5 0 0 0-1.5-1.5H13V9h1.5a.5.5 0 0 0 0-1H13V7h.5A1.5 1.5 0 0 0 15 5.5V5a.5.5 0 0 0-1 0v.5a.5.5 0 0 1-.5.5H13zm-5.5 9.975V7H3V6h-.5a.5.5 0 0 1-.5-.5V5a.5.5 0 0 0-1 0v.5A1.5 1.5 0 0 0 2.5 7H3v1H1.5a.5.5 0 0 0 0 1H3v1h-.5A1.5 1.5 0 0 0 1 11.5v.5a.5.5 0 1 0 1 0v-.5a.5.5 0 0 1 .5-.5H3a5 5 0 0 0 4.5 4.975z\" />\n                                      </svg>\n                                    </i>{\" \"}\n                                    Report a bug\n                                  </a>\n                                </div>\n                                </div>\n                              \n\n\n\n\n\n                        \n\n\n\n\n                        </div>\n                        <div className=\"text-end col-md-4 col-12\">\n                          {getStudentid ? (\n                            <Exitbtn\n                              href={`${baseUrl}/school/school_quiz_grading/${getStudentid}`}\n                            />\n                          ) : (\n                            <Exitbtn\n                              onClick={(e) => {\n                                e.preventDefault();\n                                window.close();\n                              }}\n                            />\n                          )}\n                        </div>\n                      </div>\n                    ) : (\n                      <div class=\"inline float-end\">\n                        <span className=\"mx-1\">\n                          {currentPage > 1 && (\n                            <BackButton\n                              onClick={() => {\n                                setCurrentPage(currentPage - 1);\n                              }}\n                            />\n                          )}\n                        </span>\n                        <span>\n                          {currentPage === data.total_pages && <SubmitButton />}\n                        </span>\n                        <span>\n                          {currentPage !== data.total_pages && (\n                            <NextButton\n                              onClick={() => {\n                                setCurrentPage(currentPage + 1);\n                              }}\n                            />\n                          )}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </Row>\n              </div>\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n            </div>\n\n            \n          </div>\n          \n        </form>\n        <Modal\n          isOpen={modal}\n          size=\"lg\"\n          toggle={toggle}\n          className=\"modal-dialog-centered \"\n        >\n          <ModalBody>\n            <h4 className=\"text-primary\">\n              <strong>Warning!</strong>\n            </h4>\n            <p>Some answers are not completed, are you sure to continue?</p>\n            <p className=\"text-danger\">\n              Question no: {notAnsweredQuestion} not completed.\n            </p>\n          </ModalBody>\n          <ModalFooter style={{ border: 0 }}>\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm mx-3 modal-button\"\n              onClick={toggle}\n            >\n              Edit\n            </button>\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm mx-3 modal-button\"\n              onClick={creatQuizDataAndSubmit}\n            >\n              Submit\n            </button>\n          </ModalFooter>\n        </Modal>\n        <ConfirmationModal\n          isOpen={saveModal}\n          toggle={saveToggle}\n          onClick={creatQuizDataAndSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default QuizRunner;\n","import React from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { baseUrl } from \"../libs/env\";\nimport { Exitbtn } from \"../components/buttons/exitbtn\";\nimport { Header } from \"../components/header/header\";\n\n\nconst Error = ({ isLoaded, data,  }) => {\n\n\n  if (!isLoaded)\n    return <h1 className=\"text-center\">Loading...</h1>;\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n       \n            <Row>\n              <Col className=\"text-center mt-5\">\n                <Header />\n              </Col>\n          </Row>\n          <Row>\n              <Col className=\"text-center mt-5\">\n                  <h5>Please activate your account first before sending any exercises.</h5>\n              </Col>\n          </Row>\n          <Row>\n              <Col className=\"text-center my-5\">\n              <Exitbtn href={baseUrl} />\n              </Col>\n          </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport WrittingQuiz from \"./pages/quiz/WrittingQuiz\";\nimport { Inspection } from \"./components/Inspection/Inspection\";\nimport { FillInBlanks } from \"./components/fill_in_blanks/fill_in_blanks\";\nimport QuizSubmit from \"./components/true_false_questions/QuizSubmit\";\nimport QuizRunner from \"./pages/quiz/QuizRunner\";\nimport quizAPI from \"./libs/api/quiz\";\nimport { baseUrl } from \"./libs/env\";\nimport Error from \"./erros/Error\";\nimport { isLocalHosted } from \"./libs/env\";\nimport { useHistory } from \"react-router-dom\";\n\nconst App = (props) => {\n  let  RoutePath=`/:id/:token`;\n  const [items, setItems] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const getQuizId = () => window.location.pathname.split(\"/\")[1];\n  let history = useHistory();\n  if (isLocalHosted === false) {\n  Inspection();\n  }\n\n  useEffect(() => {\n    quizAPI\n      .get({ id: getQuizId() })\n      .then((res) => res.json())\n      .then((json) => {\n        setIsLoaded(true);\n        setItems(json);\n      })\n      .catch((error) => console.log(error.message));\n  }, []);\n\n  const submitQuiz = useCallback(\n    (data) => {\n      if (data.is_submit) {\n        quizAPI\n          .post({ id: getQuizId(), data })\n          .then((res) => res.json())\n          .then((json) => {\n            setIsLoaded(true);\n            setItems(json);\n            if (json.is_show_feedback === false) {\n              history.push(\"/stagging\");\n            }\n          });\n      } else {\n        quizAPI.post({ id: getQuizId(), data });\n      }\n    },\n    [history]\n  );\n  if (window.location.pathname.split(\"/\").length === 4){\n      RoutePath=`/:id/:token/:id`;\n  }\n\n  return (\n    <Switch>\n      <Route exact path={RoutePath}>\n        {items.task_type === \"Writing Task\" ? (\n          <WrittingQuiz\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        ) : items.detail ? <Error data={items} isLoaded={isLoaded} /> :(\n          <QuizRunner data={items} isLoaded={isLoaded} onSubmit={submitQuiz} />\n        )}\n      </Route>\n      <Route exact path={`/quizsubmit`}>\n        <QuizSubmit data={items} isLoaded={isLoaded} />\n      </Route>\n      <Route path={\"/validations\"}>\n        <FillInBlanks />\n      </Route>\n      <Route path={\"/quizreview\"}>\n        {items.task_type === \"Writing Task\" ? (\n          <WrittingQuiz\n            isReview={true}\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        ) : (\n          <QuizRunner\n            isReview={true}\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        )}\n      </Route>\n      <Route path={\"/stagging\"} render={() => (window.location = baseUrl)} />\n      <Route exact path={`*`}>\n        404 - Not fount\n      </Route>\n    </Switch>\n  );\n};\n\nexport default App;\n","export const Inspection = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    if (event.ctrlKey && (event.key === \"S\" || event.key === \"s\")) {\n      event.preventDefault();\n    }\n    if (\n      event.key === \"F12\" ||\n      (event.ctrlKey && event.key === \"C\") ||\n      (event.ctrlKey && (event.key === \"E\" || event.key === \"e\")) ||\n      (event.ctrlKey && (event.key === \"J\" || event.key === \"j\")) ||\n      (event.ctrlKey && (event.key === \"I\" || event.key === \"i\")) ||\n      (event.ctrlKey && (event.key === \"K\" || event.key === \"k\")) ||\n      (event.ctrlKey && (event.key === \"U\" || event.key === \"u\"))\n    ) {\n      event.preventDefault();\n    }\n  });\n  document.addEventListener(\"contextmenu\", function (e) {\n    e.preventDefault();\n  });\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
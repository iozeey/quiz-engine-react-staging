{"version":3,"sources":["components/modals/ConfirmationModal.jsx","libs/env.js","components/buttons/exitbtn.js","components/badges/level.js","components/badges/suggested_time.js","components/buttons/SimpleButton.jsx","components/buttons/OpenButton.js","components/buttons/savebtn.js","components/buttons/SubmitButton.jsx","components/header/header.js","components/heading/heading.js","components/modals/SimpleModal.jsx","components/question/QuestionDescrption.js","components/question/question_heading.js","components/timer/timer.js","libs/api/baseAPI.js","libs/api/quiz.js","components/badges/SuggestedWords.js","pages/quiz/WrittingQuiz.jsx","components/writting_essay/textarea.js","components/badges/number_of_question.js","components/input_fields/input_field.js","components/question/question.js","components/fill_in_blanks/fill_in_blanks.js","components/buttons/Review.js","components/true_false_questions/QuizSubmit.js","components/buttons/BackButton.jsx","components/buttons/NextButton.jsx","components/listening_exercise/audio_player.js","components/notification/Notification.js","pages/quiz/useRecorder.js","pages/quiz/speaking.jsx","components/checkbox/checkbox.js","components/checkbox/label.js","components/radio_buutons/radio.js","pages/quiz/QuizRunner.helpers.js","components/answers/correct_answer.js","components/answers/wrong_answer.js","components/answers/badge/answer.js","components/drop_down/SelectChoice.js","pages/quiz/ShowQuestions.jsx","pages/quiz/QuizRunner.jsx","erros/Error.jsx","App.js","components/Inspection/Inspection.js","reportWebVitals.js","index.js"],"names":["ConfirmationModal","isOpen","toggle","onClick","Modal","size","className","ModalBody","ModalFooter","style","border","type","class","defaultProps","isLocalHosted","includes","window","location","hostname","isStaging","baseUrl","baseStagingAPI","Exitbtn","props","backgroundColor","color","width","Level","level","SuggestedTime","time","SimpleButton","label","Button","cn","OpenButton","outline","Savebtn","click","SubmitButton","Header","src","origin","marginLeft","alt","ExerciseType","title","SimpleModal","bodyContent","footerContent","getDomainUrl","QuestionDescription","description","showBtn","targetRef","useRef","useState","setIsOpen","actualHeight","dimensions","setDimensions","useLayoutEffect","setInterval","current","offsetWidth","height","offsetHeight","getClientRects","index","collapseHeight","render","collapseState","ref","marginBottom","QuestionHeading","question","Timer","totalTimeInSeconds","onStop","localSpentTime","isStopTimer","options","autoStart","localTime","Date","setSeconds","getSeconds","parseInt","offsetTimestamp","useStopwatch","seconds","minutes","pause","hours","spent_minutes","padStart","spent_seconds","storeInLocalStorage","useCallback","timeInSeconds","sessionStorage","setItem","useEffect","BaseAPI","makeHeader","Headers","Authorization","pathname","split","Accept","fetchSecure","url","fetch","method","headers","postSecure","data","body","JSON","stringify","this","getStudentid","getQuizUrl","quiz_id","get","id","post","SuggestedWords","words","answers","TextArea","value","onchange","restprops","name","spellcheck","placeholder","onChange","WrittingQuiz","isLoaded","onSubmit","isReview","modal","setModal","isOpenAdditionalResourceModal","setOpenAdditionalResourceModal","additionalResourceToggle","timer","setTimer","length","wordsCounter","setWordsCount","completed_at","setIsStopTimer","status","time_spent","undefined","addEventListener","alertUser","removeEventListener","words_count","written_text","e","creatQuizDataAndSave","preventDefault","returnValue","getItem","quiz_data","is_submit","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastId","handleSubmit","useForm","error","Row","Col","sm","md","recom_time","xs","task_type","dangerouslySetInnerHTML","__html","task_levels","prompt_content","html_content","showbtn","additional_resource","defaultValue","target","onBlur","Math","floor","user_score","href","close","NumberOfQuestions","questions","InputFiled","fieldLength","onblur","restProps","maxLength","autoComplete","borderColor","Question","counter","counterClass","showNumbers","FillInBlanks","register","errors","formState","Container","console","log","question_counter","question_title","required","fillinblank1","fillinblank","fillinblank2","fillinblank3","Review","QuizSubmit","BackButton","NextButton","AudioPlayer","controls","controlsList","a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","start","stop","handleData","URL","createObjectURL","requestRecorder","then","Speaking","speakingUrl","startRecording","stopRecording","xmlns","fill","viewBox","d","CheckBox","checked","Label","for","Radio","selectQuestionCounterOrCharacter","show_abc_sequence","isInUserSelectedAnswers","possible_answers_id","user_selected_id","user_selected","forEach","element","push","CorrectAnswer","WrongAnswer","Answer","SelectChoice","choices","backgroundImage","selected","map","choice","replaceAll","number","ShowQuestions","onAnswer","currentPage","answer","inputFiledLength","checkflag","currentQuestion","setCurrentQuestion","fieldNumber","isShowNumbering","fieldlenght","qai","page","replace","matched","match","questionNumber","converted","ReactHtmlParser","transform","node","given_answer","corrent_answer","user_answer","ans","question_id","selected_answers","sel_ans","attribs","possible_answers","possible_answer","inputLenght","input_field_length","disabled","dropdown_corrent_answer","question_flag","question_answer_number","is_correct","question_number","placeholder_id","question_horizontal_display","pai","image","image_height","px","defaultChecked","QuizRunner","setSpeakingUrl","showWarning","setShowWarnings","notAnsweredQuestion","setNotAnsweredQuestions","saveModal","setSaveModal","saveToggle","setCurrentPage","setQuestions","question_item","creatQuizDataAndSubmit","message","notify","fields","answeredQuestion","notAnswered","selectdAnswers","sel_answer","i","noOfFilelds","sel","join","getAttribute","question_type","is_checkbox_checked","is_radio_checked","found_answer","find","removed_selected_answer_arr","remove","sa_item_id","answer_index","indexOf","answer_item_id","found_selected_answer","selectedOptions","total_pages","Error","App","RoutePath","items","setItems","setIsLoaded","getQuizId","history","useHistory","event","ctrlKey","key","document","quizAPI","res","json","catch","submitQuiz","is_show_feedback","exact","path","detail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0ff512c5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst ConfirmationModal = ({ isOpen, toggle, onClick }) => {\n  return (\n    <Modal\n    isOpen={isOpen}\n    size=\"lg\"\n    toggle={toggle}\n    className=\"modal-dialog-centered \"\n  >\n    <ModalBody>\n      <h4 className=\"text-primary\">\n        <strong>Are you sure!</strong>\n      </h4>\n      <p>After submitting your work, you cannot making any changes.</p>\n    </ModalBody>\n    <ModalFooter style={{ border: 0 }}>\n      <button\n        type=\"submit\"\n        class=\"btn btn-sm mx-3 modal-button\"\n        onClick={onClick}\n      >\n        Submit\n      </button>\n    </ModalFooter>\n  </Modal>\n  );\n};\n\nConfirmationModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  creatQuizDataAndSubmit: PropTypes.func.isRequired,\n};\n\nConfirmationModal.defaultProps = { isOpen: false, };\n\nexport default ConfirmationModal;\n","import includes from \"lodash/includes\";\nexport const isLocalHosted = includes(window.location.hostname, \"localhost\");\nexport const isStaging = includes(window.location.hostname, \"gradingly.netlify.app\");\nexport const baseUrl = isLocalHosted\n  ? \"http://localhost:8000\"\n  : isStaging ? \"https://staging.gradingly.com\":\"https://app.gradingly.com\";\n\nexport const baseStagingAPI = `${baseUrl}/api`;\n\nexport const getBaseApiUrl = () => baseStagingAPI;\n","import React from \"react\";\n\nexport function Exitbtn({...props}) {\n     return (\n          <a  {...props} class=\"btn btn-lg\" style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\" }}>Exit</a>\n     );\n}\n","import React from 'react';\n\nexport function Level(props){\n    return ( \n        <span  className=\"badge d-flex customized-badge rounded-border even-larger-badge \" > Level:&nbsp; {props.level} </span>\n    )\n      \n      \n}","import React from 'react';\n\nexport function SuggestedTime(props){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Suggested time: {props.time} minutes</span>\n    )\n      \n      \n}","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./SimpleButton.scss\";\nimport cn from \"classname\";\n\nconst SimpleButton = ({ label, ...props }) => {\n  return (\n    <Button className={cn(\"simple-button w-20\")} {...props}>\n      {label}\n    </Button>\n  );\n};\n\nSimpleButton.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default SimpleButton;\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst OpenButton = ({ ...props }) => (\n  <SimpleButton outline color=\"\" label={<strong>Open</strong>} {...props} />\n);\n\nexport default OpenButton;\n","import React from \"react\";\n\nexport function Savebtn(props){\n    return (\n         <button type=\"button\" class=\"btn btn-lg\" style={{ backgroundColor :\"#2f56a1\",color:\"white\",width:\"150px\"}} onClick={props.click}>Save</button>\n    )\n  }\n","import React from \"react\";\n\nconst SubmitButton = ({...props}) => {\n  return (\n    <input\n      type=\"submit\"\n      class=\"btn btn-lg\"\n      style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\"}}\n      {...props}\n    />\n  );\n};\n\nexport default SubmitButton;\n","import React from \"react\";\n\nexport const getDomainUrl = () => `${window.location.origin}`;\n\nexport function Header() {\n  return (\n    <img \n      src={`${getDomainUrl()}/logo1.png`}\n      style={{ width: \"300px\" , marginLeft: \"30px\"}}\n      alt=\"\"\n    />\n  );\n}\n","import React from 'react';\n\nexport function ExerciseType(props) {\n    return (\n        <h4 className=\"heading-color margin-0\"><b>{props.title}</b></h4>\n    )\n\n\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst SimpleModal = ({ isOpen, size, toggle, bodyContent, footerContent }) => {\n  return (\n    <Modal\n      size={size}\n      isOpen={isOpen}\n      toggle={toggle}\n      className=\"modal-dialog-centered \"\n    >\n      <ModalBody>{bodyContent}</ModalBody>\n      <ModalFooter style={{ border: 0 }}>{footerContent}</ModalFooter>\n    </Modal>\n  );\n};\n\nSimpleModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n\nSimpleModal.defaultProps = { isOpen: false, size: \"lg\" };\n\nexport default SimpleModal;\n","import React, { useRef, useLayoutEffect, useState } from \"react\";\nimport Collapse from \"@kunukn/react-collapse\";\nimport { Button } from \"reactstrap\";\n\nexport const getDomainUrl = () => `${window.location.origin}`;\n\nconst QuestionDescription = ({ description, showBtn }) => {\n  const targetRef = useRef();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    actualHeight: 0,\n  });\n\n  useLayoutEffect(() => {\n    setInterval(function(){\n      if (targetRef.current) {\n        setDimensions({\n          width: targetRef.current.offsetWidth,\n          height: targetRef.current.offsetHeight,\n          actualHeight: targetRef.current.getClientRects()[0][\"height\"],\n        });\n      }\n    },500);\n  }, []);\n\n  const toggle = (index) => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"app\">\n      <Collapse\n        isOpen={!isOpen}\n        collapseHeight=\"70px\"\n        className=\"mb-3 app__collapse\"\n        render={(collapseState) => (\n          <div\n            ref={targetRef}\n            className={!isOpen ? \"\" : \"app__content\"}\n            onClick={() => (isOpen ? toggle() : null)}\n          >\n            {description}\n          </div>\n        )}\n      />\n      <div className=\"text-end\">\n        {showBtn && dimensions.actualHeight > 70 ? (\n          <Button\n            size=\"sm\"\n            onClick={() => toggle()}\n            style={{\n              backgroundColor: \"#2f56a1\",\n              color: \"white\",\n              marginBottom: \"3px\",\n            }}\n          >\n            {isOpen ? (\n              <div>\n                <img src={`${getDomainUrl()}/arrowdown.png`} alt=\"\" />\n                Expand\n              </div>\n            ) : (\n              <div>\n                <img src={`${getDomainUrl()}/arrowup.png`} alt=\"\" />\n                Collapse\n              </div>\n            )}\n          </Button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionDescription;\n","import React from \"react\";\n\nexport function QuestionHeading(props) {\n  return (\n    <p class=\"font-size-18 mb-3\">\n      <span className=\"fw-bold me-1 mb-2\">Question:</span> {props.question}{\" \"}\n    </p>\n  );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport { padStart } from \"lodash\";\n\nexport function Timer({\n  totalTimeInSeconds,\n  onStop,\n  localSpentTime,\n  isStopTimer,\n}) {\n  let options = {\n    autoStart: true,\n  };\n  \n  const localTime = new Date();\n  localTime.setSeconds(\n    localTime.getSeconds() +\n      parseInt(localSpentTime)\n  );\n\n  if (localTime) {\n    options = { ...options, offsetTimestamp: localTime };\n  }\n  const { seconds, minutes, pause, hours } = useStopwatch(options);\n  let spent_minutes = padStart([`${minutes}`] , [2] , ['0']) ;\n  let spent_seconds = padStart([`${seconds}`] , [2] , ['0']) ;\n  const storeInLocalStorage = useCallback(() => {\n    const timeInSeconds = seconds + minutes * 60 + hours * 60 * 60;\n    if (timeInSeconds >= parseInt(totalTimeInSeconds * 60)) {\n      onStop(timeInSeconds);\n    }\n\n    window.sessionStorage.setItem(\"timer\", timeInSeconds);\n  }, [minutes, seconds, hours, onStop, totalTimeInSeconds]);\n\n  useEffect(() => {\n    storeInLocalStorage();\n  }, [storeInLocalStorage]);\n\n  useEffect(() => {\n    if (isStopTimer) {\n      pause();\n    }\n  }, [isStopTimer, pause]);\n\n  return (\n    <div className=\"inline\">\n      Time: <span>{spent_minutes}</span>:<span>{spent_seconds}</span>{ totalTimeInSeconds ? `/${parseInt(totalTimeInSeconds)} min`: null }\n    </div>\n  );\n}\n","class BaseAPI {\n  constructor(props) {\n    this.props = props;\n  }\n\n  makeHeader = () => {\n    return new Headers({\n      Authorization: `Token ${window.location.pathname.split(\"/\")[2]}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    });\n  };\n  fetchSecure = ({ url }) => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: this.makeHeader(),\n    });\n  };\n\n  postSecure = ({ url, data }) => {\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.makeHeader(),\n      body: JSON.stringify({ ...data }),\n    });\n  };\n}\n\nexport default BaseAPI;\n","import { getBaseApiUrl } from \"./../env\";\nimport BaseAPI from \"./baseAPI\";\nexport const  getStudentid = window.location.pathname.split(\"/\")[3];\n   \nconst getQuizUrl = (quiz_id) => `${getBaseApiUrl()}/quiz/${quiz_id}/?id=${getStudentid}`;\n\nclass API extends BaseAPI {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  get = ({ id }) => {\n    return this.fetchSecure({ url: getQuizUrl(id) });\n  };\n\n  post = ({ id, data }) => {\n    return this.postSecure({ url: getQuizUrl(id), data });\n  };\n}\n\nexport default new API();\n","import React from 'react';\n\nexport default  function SuggestedWords({words}){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Suggested Words: {words} </span>\n    )\n      \n      \n}","import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Col, Row  } from \"reactstrap\";\nimport ConfirmationModal from \"../../components/modals/ConfirmationModal\";\nimport get from \"lodash/get\";\nimport { baseUrl } from \"../../libs/env\";\nimport { Exitbtn } from \"../../components/buttons/exitbtn\";\nimport { Level } from \"./../../components/badges/level\";\nimport { SuggestedTime } from \"./../../components/badges/suggested_time\";\nimport OpenButton from \"./../../components/buttons/OpenButton\";\nimport { Savebtn } from \"./../../components/buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\nimport { Header } from \"./../../components/header/header\";\nimport { ExerciseType } from \"./../../components/heading/heading\";\nimport SimpleModal from \"./../../components/modals/SimpleModal\";\nimport QuestionDescription from \"./../../components/question/QuestionDescrption\";\nimport { QuestionHeading } from \"./../../components/question/question_heading\";\nimport { Timer } from \"./../../components/timer/timer\";\nimport { getStudentid } from \"../../libs/api/quiz\";\nimport SuggestedWords from \"./../../components/badges/SuggestedWords\";\nimport { TextArea } from \"./../../components/writting_essay/textarea\";\nimport { size } from \"lodash\";\n\nlet answers;\n\nconst WrittingQuiz = ({ isLoaded, data, onSubmit, isReview }) => {\n  const notify = () =>\n    toast.success(\"Successfully Saved!\", {\n      position: \"top-right\",\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      toastId: 1,\n    });\n\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n  const [isOpenAdditionalResourceModal, setOpenAdditionalResourceModal] =\n    useState(false);\n  const additionalResourceToggle = () =>\n    setOpenAdditionalResourceModal(!isOpenAdditionalResourceModal);\n  const [timer, setTimer] = useState();\n  let [wordsCounter, setWordsCount] = useState(\n    data.answers ? data.answers.split(\" \").length : 0 \n  );\n\n  if (data.completed_at) {\n    isReview = true;\n  }\n\n  if (data.answers && data.completed_at === null) {\n    answers=data.answers;\n  }\n // answers=data.answers && data.completed_at === null ? data.answers : null;\n  const [isStopTimer, setIsStopTimer] = useState(false);\n\n  useEffect(() => {\n    setTimer(\n      data.status === \"New\" || data.time_spent === null\n        ? \"00\"\n        : get(data, \"time_spent\")\n    );\n  }, [data]);\n\n  useEffect(() => {\n    if (isReview !== undefined || data.status !== null) {\n      window.addEventListener(\"beforeunload\", alertUser);\n      return () => {\n        window.removeEventListener(\"beforeunload\", alertUser);\n      };\n    }\n  });\n  const alertUser = (e) => {\n    if (isReview === undefined) {\n      creatQuizDataAndSave();\n      e.preventDefault();\n      e.returnValue = \"\";\n    }\n  };\n\n  const creatQuizDataAndSubmit = () => {\n    const timer = window.sessionStorage.getItem(\"timer\");\n    let quiz_data = {\n      is_submit: true,\n      time_spent: parseInt(timer),\n      answers,\n    };\n    setIsStopTimer(true);\n    onSubmit(quiz_data);\n    setIsStopTimer(false);\n    toggle()\n  };\n  const creatQuizDataAndSave = () => {\n    if (!isReview) {\n      const timer = window.sessionStorage.getItem(\"timer\");\n      let quiz_data = {\n        is_submit: false,\n        time_spent: parseInt(timer),\n        answers,\n      };\n      setIsStopTimer(true);\n      onSubmit(quiz_data);\n      setIsStopTimer(false);\n      notify();\n    }\n  };\n  let words_count, written_text;\n  const onBlur = (e) =>{\n    answers = e.target.value;\n  }\n\n  const textarea_change = (e) => {\n    written_text = e.target.value;\n    words_count = written_text.split(\" \").length;\n    if (!written_text) {\n      words_count = 0;\n    }\n    setWordsCount(words_count);\n  };\n\n\n  const { handleSubmit } = useForm();\n\n  const onFormSubmit = () => {\n    if (wordsCounter < 100 || wordsCounter > 1000) {\n      toast.error(\n        \"Answer length must be between 100 and 1000 words, current words are:\" +\n          wordsCounter,\n        {\n          position: \"top-right\",\n          autoClose: false,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          toastId: 1,\n        }\n      );\n    } else {\n      setModal(!modal);\n    }\n  };\n\n  if (!isLoaded)\n    return <h1 className=\"text-primary text-center\">Loading...</h1>;\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <div className=\"p-md-5\">\n            <Row>\n              <Col sm>\n                <Header />\n              </Col>\n              <Col md className=\"mt-3 text-end\">\n                <span className=\"p-1 timer-content\">\n                  <b>\n                  {data && timer && (\n                      <Timer\n                        isStopTimer={\n                          data.status === null || isReview ? true : isStopTimer\n                        }\n                        totalTimeInSeconds={data.recom_time}\n                        localSpentTime={timer}\n                        onStop={(props) => {\n                          // alert(\"Times up\");\n                          setIsStopTimer(false);\n                          // creatQuizDataAndSubmit();\n                        }}\n                      />\n                    )}\n                  </b>\n                </span>\n              </Col>\n            </Row>\n            <div className=\"p-md-5\">\n              <div>\n                <div\n                  className=\"border border-light p-3 row\"\n                  xs=\"1\"\n                  sm=\"1\"\n                  md=\"4\"\n                >\n                  <Col md>\n                    <div class=\"content-align-center\">\n                      <ExerciseType title={data.task_type} />\n                    </div>\n                  </Col>\n\n                  <Col md className=\"center\">\n                    <SuggestedTime time={data.recom_time} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <SuggestedWords words=\"350\" />\n                  </Col>\n                  <Col md className=\"center\">\n                    <div className=\"d-flex\">\n                      <Level\n                        level={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.task_levels,\n                            }}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                </div>\n                <Row className=\"border border-light p-3\">\n                  <Col>\n                    <div class=\"d-flex flex-column\">\n                      <QuestionHeading\n                        question={\n                          data.prompt_content \n                        }\n                      />\n                      <QuestionDescription\n                        description={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.html_content,\n                            }}\n                          />\n                        }\n                        showbtn={true}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n                <Row\n                  className={\n                    size(data.additional_resource) <= 0\n                      ? \"\"\n                      : \"p-3 border border-light\"\n                  }\n                >\n                  {size(data.additional_resource) <= 0 ? (\n                    \"\"\n                  ) : (\n                    <div>\n                      <span class=\"font-size-18 mt-3 mb-3\">\n                        <strong> Additional question resource </strong>\n                        <OpenButton\n                          onClick={() =>\n                            setOpenAdditionalResourceModal(\n                              !isOpenAdditionalResourceModal\n                            )\n                          }\n                        />\n                      </span>\n                    </div>\n                  )}\n\n                  <SimpleModal\n                    isOpen={isOpenAdditionalResourceModal}\n                    toggle={additionalResourceToggle}\n                    bodyContent={\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.additional_resource,\n                        }}\n                      />\n                    }\n                    footerContent={\n                      <button\n                        type=\"submit\"\n                        class=\"btn btn-sm mx-3 modal-button\"\n                        onClick={additionalResourceToggle}\n                      >\n                        Close\n                      </button>\n                    }\n                  />\n                </Row>\n                <Row className=\"border border-light p-3\">\n                  <TextArea\n                    defaultValue={data.completed_at === null ? data.answers : null}\n                    value={isReview? data.answers:null}\n                    onchange={textarea_change}\n                    onBlur={onBlur}\n                   \n                  />\n                </Row>\n                <Row className=\"border border-light px-3 py-2\">\n                  <span className=\"text-muted\">\n                    {\" \"}\n                    Words: {wordsCounter} words{\" \"}\n                  </span>\n                </Row>\n\n                <Row>\n                  <div class=\"mb-3 mt-3 p-0 m-0\">\n                    {isReview || data.status === null ? null : (\n                      <div class=\"inline float-start\">\n                        <Savebtn click={creatQuizDataAndSave} />\n                        <ToastContainer />\n                      </div>\n                    )}\n                    {isReview || data.status === null ? (\n                        <div className=\"row\">\n                        <div className=\"col-8\">\n                        {data && isReview ? (\n                          <div md className=\"mt-3 text-end\">\n                            <span className=\"p-1 score-content\">\n                              <b>\n                                <div className=\"inline\">\n                                  Score: { Math.floor(data.user_score)} / 100 points (\n                                  {Math.floor((data.user_score / 100) * 100)}%)\n                                </div>\n                              </b>\n                            </span>\n                          </div>\n                        ) : null}\n                        </div>\n                        <div className=\"text-end col-4\">\n                          {getStudentid ?\n                        <Exitbtn href={`${baseUrl}/school/school_quiz_grading/${getStudentid}`} />\n                        : \n                        <Exitbtn onClick={(e) => { e.preventDefault(); window.close() }} />\n\n                          }\n                      </div>\n                      </div>\n                    ) : (\n                      <div class=\"inline float-end\">\n                        <SubmitButton />\n                      </div>\n                    )}\n                  </div>\n                </Row>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n      <ConfirmationModal\n          isOpen={modal}\n          toggle={toggle}\n          onClick={creatQuizDataAndSubmit}\n        />\n    </div>\n  );\n};\n\nexport default WrittingQuiz;\n","import React from \"react\";\nexport function TextArea({value , onchange  ,...restprops}) {\n  return (\n    <textarea\n      class=\"answer-area\"\n      name=\"answer-submission\"\n      id=\"submission-text\"\n      type=\"text\"\n      value={value}\n      spellcheck=\"false\"\n      data-gramm=\"false\"\n      placeholder=\"Start writing here...\"\n      onChange={onchange}\n      {...restprops}\n    ></textarea>\n  );\n}\n","import React from 'react';\n\nexport function NumberOfQuestions(props){\n    return ( \n        <span  className=\"badge customized-badge rounded-border even-larger-badge \" >Number of questions: {props.questions} </span>\n    )\n      \n      \n}","import React from \"react\";\nexport function InputFiled({fieldLength, value, name, onblur, ...restProps }) {\n  return (\n    <div class=\"inline-grid mx-1 mb-1\">\n      <input\n        type=\"text\"\n        name={name}\n        value={value}\n        size={fieldLength}\n        maxLength={fieldLength}\n        onBlur={onblur}\n        autoComplete=\"off\"\n        class=\"form-control-sm form-control-custom-sm\"\n        style={{ borderColor: \"#2f56a1\" }}\n        {...restProps}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Question = ({ counter, title, counterClass, showNumbers }) => (\n  <div className=\"d-flex align-items-start\">\n    {showNumbers && <strong className={counterClass}>{counter} </strong>}\n    <span>{title}</span>\n  </div>\n);\n\nexport default Question;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Level } from \"../badges/level\";\nimport { NumberOfQuestions } from \"../badges/number_of_question\";\nimport { SuggestedTime } from \"../badges/suggested_time\";\nimport { Savebtn } from \"../buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\n\nimport { Header } from \"../header/header\";\nimport { ExerciseType } from \"../heading/heading\";\nimport { InputFiled } from \"../input_fields/input_field\";\nimport Question from \"../question/question\";\nimport { QuestionHeading } from \"../question/question_heading\";\nimport { Timer } from \"../timer/timer\";\n\nexport function FillInBlanks() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <Container className=\"dashboard-wrapper container-fluid pg-content bg-white  p-md-5 p-3\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row>\n          <Header />\n        </Row>\n\n        <Row className=\"border border-light mt-3 mb-3\" xs=\"1\" sm=\"2\" md=\"4\">\n          <Col>\n            <div class=\"content-align-center\">\n              <ExerciseType title=\"Grammar exercise\" />\n            </div>\n          </Col>\n          <Col>\n            <SuggestedTime time=\"10\" />\n          </Col>\n          <Col>\n            <NumberOfQuestions questions=\"2\" />\n          </Col>\n          <Col>\n            <Level level=\"B2 (CERF)\" />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <QuestionHeading question=\"Read the dialouges. Complete them with i'm, i'm not, are, aren't, is or isn't\" />\n          </Col>\n        </Row>\n        <Row className=\"border border-light font-size-18\">\n          <div class=\"row mb-3  \">\n            <Question question_counter=\"A.\" question_title=\"Are you mexican?\" />\n          </div>\n          <div class=\"d-flex flex-row bd-highlight mb-3\">\n            <div class=\"bd-highlight\">\n              <Question question_counter=\"B.\" question_title=\"No, \" />\n            </div>\n            <div class=\"mx-3 bd-highlight\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank1\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank1 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Mexican. \" />\n            </div>\n            <div class=\"mx-3 bd-highlight text-center\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Argentinian. \" />\n            </div>\n          </div>\n          <div class=\"row mb-3  \">\n            <Question question_counter=\"A.\" question_title=\"Are you mexican?\" />\n          </div>\n          <div class=\"d-flex flex-row bd-highlight mb-3\">\n            <div class=\"bd-highlight\">\n              <Question question_counter=\"B.\" question_title=\"No, \" />\n            </div>\n            <div class=\"mx-3 bd-highlight\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank2\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank2 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Mexican. \" />\n            </div>\n            <div class=\"mx-3 bd-highlight text-center\">\n              <div class=\"icon-wrapper\">\n                <InputFiled\n                  register={register(\"fillinblank3\", {\n                    required: true,\n                    maxLength: 20,\n                  })}\n                  class=\"form-control form-control-sm\"\n                />\n                {errors.fillinblank3 && (\n                  <span className=\"text-danger\">This feld is requred</span>\n                )}\n              </div>\n            </div>\n            <div class=\"bd-highlight\">\n              <Question question_title=\"Argentinian. \" />\n            </div>\n          </div>\n        </Row>\n        <Row className=\"border border-light mb-12 \">\n          <div class=\"row mb-3\">\n            <div class=\"col-12 text-end\">\n              {\" \"}\n              <Timer />{\" \"}\n            </div>\n          </div>\n        </Row>\n\n        <Row>\n          <div class=\"mb-3\">\n            <div class=\"inline float-start\">\n              <Savebtn />\n            </div>\n            <div class=\"inline float-end\">\n              <SubmitButton />\n            </div>\n          </div>\n        </Row>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nexport function Review() {\n     return (\n          <button type=\"button\" class=\"btn btn-lg\" style={{ backgroundColor: \"#2f56a1\", color: \"white\", width: \"150px\" }}>Review</button>\n     );\n}\n","import React from \"react\";\nimport { Container, Row } from \"reactstrap\";\nimport { Header } from \"../header/header\";\nimport { Exitbtn } from \"../buttons/exitbtn\";\nimport { Review } from \"../buttons/Review\";\n\nexport default function QuizSubmit({ isLoaded, data }) {\n  console.log(data);\n  if (!isLoaded)\n  {\n    return <h1 className=\"text-center\">Loading...</h1>;\n  }\n  else{\n\n  \n  return (\n    <Container className=\"dashboard-wrapper mb-3 mt-3 container-fluid pg-content bg-white  p-md-5 p-3\">\n      <Row className=\"mb-3\">\n        <Header />\n      </Row>\n      <Row className=\"text-center\">\n        <p className=\"text-primary\">\n          <h4>Your Quiz is submitted successfully!</h4>\n        </p>\n      </Row>\n      <Row>\n        <div class=\"mb-3 mt-3 p-0 m-0\">\n          <div class=\"inline float-start\">\n            <Exitbtn />\n          </div>\n          <div class=\"inline float-end\">\n            <Review />\n          </div>\n        </div>\n      </Row>\n    </Container>\n  );\n}\n}\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst BackButton = ({...props}) => (\n  <SimpleButton\n    outline\n    type=\"button\"\n    className=\"btn btn-lg\"\n    style={{ backgroundColor: \"#2f56a1\", color: \"white\" }}\n    label=\"Back\"\n    {...props}\n  />\n);\n\nexport default BackButton;\n","import React from \"react\";\nimport SimpleButton from \"./SimpleButton\";\n\nconst NextButton = ({...props}) => (\n  <SimpleButton\n    outline\n    type=\"button\"\n    className=\"btn btn-lg\"\n    style={{ backgroundColor: \"#2f56a1\", color: \"white\" }}\n    label=\"Next\"\n    {...props}\n  />\n);\n\nexport default NextButton;\n","import React from \"react\";\nexport function AudioPlayer(props) {\n    return (\n        <audio controls controlsList=\"nodownload\">\n            <source src={props.src} type={props.type} />\n        </audio>\n    )\n}","import { toast } from \"react-toastify\";\nexport const notify = (message, autoClose = 3000) =>\n  toast.success(message, {\n    position: \"top-right\",\n    autoClose: autoClose,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    toastId: 1,\n  });\n","import { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    const handleData = e => {\n      setAudioURL(URL.createObjectURL(e.data));\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\nexport default useRecorder;\n","import * as React from \"react\";\nimport useRecorder from \"./useRecorder\";\n\nexport const Speaking = ({ speakingUrl }) => {\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n  speakingUrl(audioURL);\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-3\">\n        <button\n          type=\"button\"\n          onClick={!isRecording ? startRecording : stopRecording}\n          class={\n            !isRecording\n              ? \"btn btn-outline-dark btn-lg px-0 py-1\"\n              : \"btn btn-outline-danger btn-lg px-0 py-1\"\n          }\n        >\n          <div>\n            <span className=\"text-start pe-2\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                fill={!isRecording ? \"#02b56b\" : \"#ee3b3b\"}\n                class=\"bi bi-mic-fill\"\n                viewBox=\"0 0 16 20\"\n              >\n                <path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\" />\n                <path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\" />\n              </svg>\n            </span>\n            <b className=\"text-end pe-5\"> {!isRecording ? \"Start\" : \"Stop\"} </b>\n          </div>\n        </button>\n      </div>\n      <div className=\"col-12\">\n        <audio src={audioURL} controls controlsList=\"nodownload\" />\n      </div>\n    </div>\n  );\n};\n","import { React } from \"react\";\n\nexport function CheckBox({ onBlur, name, checked, id, value, index, ...restProps }) {\n  return (\n      <span>\n        <input\n          name={name}\n          onBlur={onBlur}\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          id={id}\n          checked={checked}\n          value={value}\n          {...restProps}\n        />\n      </span>\n  );\n}\n","import React from \"react\";\n\nexport function Label(props) {\n    return (\n        <label class=\"d-flex inline\" for={props.for}>{props.label}</label>\n    )\n}","import React from \"react\";\n\nexport function Radio({ name, onBlur, id, checked, value,index,...restProps }) {\n  return (\n    \n      <span>\n        <input\n          onBlur={onBlur}\n          name={name}\n          class=\"form-check-input\"\n          id={id}\n          type=\"radio\"\n          checked={checked}\n          value={value}\n          {...restProps}\n        />\n      </span>\n   \n  );\n}\n","export const selectQuestionCounterOrCharacter = ({\n  show_abc_sequence,\n  index,\n}) => {\n  const alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  return show_abc_sequence ? alphabet[index] : index + 1;\n};\n\nexport const isInUserSelectedAnswers = (question, possible_answers_id) => {\n  let user_selected_id = [];\n  if (question.user_selected) {\n    question.user_selected.forEach(element => {\n      user_selected_id.push(element.id)\n    }); \n  }\n  return question && user_selected_id && user_selected_id.includes(possible_answers_id);\n};\n","import React from \"react\";\nexport function CorrectAnswer(props) {\n  return (\n    <span class={props.class}>\n      <img src=\"/correct.png\" width=\"17px\" alt=\"\" />\n    </span>\n  );\n}\n","import React from \"react\";\nexport function WrongAnswer(props) {\n  return (\n    <span class={props.class}>\n      <img src=\"/wrong.png\" width=\"17px\" alt=\"\" />\n    </span>\n  );\n}\n","import React from \"react\";\nexport function Answer(props){\n    return(\n        <span class={props.class }>{props.value}</span>\n    )\n}","import React from \"react\";\n\nexport function SelectChoice({ choices = [], onblur, isReview , id,...restprops }) {\n  \n  return (\n    <div className=\"d-inline-flex mx-1 mb-1\">\n      <select\n       \n        className=\"form-select\"\n        style={{\n          borderColor: \"#2f56a1\",\n          backgroundImage: \"url('/arrow-down.png')\"\n        }}\n        onBlur={onblur}\n        {...restprops}\n      >\n        {isReview ? null :  <option selected>select answer</option>}\n        {choices &&\n          choices.map((choice, index) => (\n            <option key={choice.number} data-possible-question-id={choice.id} selected={id === choice.id ? true : false}>\n              {choice.prompt_content.replaceAll(/(<([^>]+)>)/gi, \"\")}\n            </option>\n          ))}\n        ;\n      </select>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { CheckBox } from \"./../../components/checkbox/checkbox\";\nimport { Label } from \"./../../components/checkbox/label\";\nimport Question from \"./../../components/question/question\";\nimport { Radio } from \"./../../components/radio_buutons/radio\";\nimport { selectQuestionCounterOrCharacter } from \"./QuizRunner.helpers\";\nimport PropTypes from \"prop-types\";\nimport { CorrectAnswer } from \"../../components/answers/correct_answer\";\nimport { InputFiled } from \"../../components/input_fields/input_field\";\nimport { WrongAnswer } from \"../../components/answers/wrong_answer\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { isInUserSelectedAnswers } from \"./QuizRunner.helpers\";\nimport { size } from \"lodash\";\nimport { Answer } from \"../../components/answers/badge/answer\";\nimport { SelectChoice } from \"../../components/drop_down/SelectChoice\";\n\nfunction ShowQuestions({\n  questions,\n  onAnswer,\n  currentPage,\n  isReview,\n  answer,\n  status,\n}) {\n  let inputFiledLength = [];\n  let checkflag = false;\n  const [currentQuestion, setCurrentQuestion] = useState(currentPage);\n\n  useEffect(() => {\n    setCurrentQuestion(currentPage);\n  }, [currentPage]);\n\n  let isShowNumbering = size(questions) > 1;\n  let fieldNumber , fieldlenght = 0;\n\n  return (\n    <div>\n      {questions &&\n        questions.map((question, qai) => {\n          if (\n            isReview ||\n            status === null ||\n            parseInt(currentQuestion) === parseInt(question.page)\n          ) {\n            question.prompt_content.replace(\n              /\\[\\[[^\\]]*\\]\\]\\*([\\d]+)/g,\n              function replacer(matched) {\n                matched.replace(/\\[\\[[^\\]]*\\]\\]/g, function replace(match) {\n                  fieldNumber = match.match(/\\d+/)\n                 \n                });\n                matched.replace(/\\*([\\d]+)/g, function replacer(matched) {\n                  fieldlenght = matched.match(/\\d+/)\n                });\n                inputFiledLength.push({questionNumber : question.id,fieldNumber :  fieldNumber[0], fieldlenght: fieldlenght[0]});\n              }\n            );\n            const trimedString = question.prompt_content.replace(\n              /(<|&lt;)br\\s*\\/*(>|&gt;)/g,\n              \" \"\n            );\n            const converted = trimedString.replace(\n              /\\[\\[[^\\]]*\\]\\]/g,\n              function replacer(matched) {\n                return question.type === \"FillInBlank\"\n                  ? `<input type=\"text\" className=\"form-control-sm\" data-id =\"${matched.match(\n                      /\\d+/\n                    )}\"  class=\"inline\"/>`\n                  : `<select data-id =\"${matched.match(\n                      /\\d+/\n                    )}\"  class=\"inline\"></select>`;\n              }\n            );\n\n            return (\n              <div className=\"mb-3\" key={qai}>\n                <div className=\"icon-wrapper\">\n                  <Question\n                    // counterClass={getCounterCls(converted)}\n                    showNumbers={isShowNumbering}\n                    counterClass=\"me-2\"\n                    counter={qai + 1 + \".\"}\n                    title={ReactHtmlParser(converted.replace(/\\*([\\d]+)/g,''), {\n                      transform: (node) => {\n                        if (node.name === \"input\") {\n                          let user_answer = \"\";\n                          answer.forEach((ans) => {\n                            if (ans.question_id === question.id) {\n                              ans.selected_answers.forEach((sel_ans) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  sel_ans[\"number\"]\n                                ) {\n                                  user_answer = sel_ans[\"answer\"];\n                                }\n                              });\n                            }\n                          });\n                          let given_answer;\n                          let corrent_answer;\n                          if (isReview) {\n                            if (question.user_selected) {\n                              question.user_selected.forEach(\n                                (user_selected) => {\n                                  if (\n                                    parseInt(node.attribs[\"data-id\"]) ===\n                                    user_selected.number\n                                  ) {\n                                    given_answer = user_selected[\"answer\"];\n                                  }\n                                }\n                              );\n                            }\n\n                            question.possible_answers.forEach(\n                              (possible_answer) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  possible_answer.number\n                                ) {\n                                  corrent_answer =\n                                    possible_answer.prompt_content;\n                                }\n                              }\n                            );\n                          }\n                          let inputLenght = 0;\n                          inputFiledLength.forEach((input_field_length)=>{\n                              if (node.attribs[\"data-id\"] === input_field_length.fieldNumber && input_field_length.questionNumber === question.id ) {\n                                inputLenght=input_field_length.fieldlenght;\n                              }\n                          });\n                          return (\n                            <div class=\"inline-grid icon-wrapper\">\n                              <InputFiled\n                                fieldLength={inputLenght === 0 ? question.input_field_length : inputLenght}\n                                disabled={isReview}\n                                data-question-type={question.type}\n                                data-value={node.attribs[\"data-id\"]}\n                                data-question-id={question.id}\n                                value={isReview ? given_answer : null}\n                                defaultValue={user_answer ? user_answer : null}\n                                onblur={onAnswer}\n                                className={\n                                  corrent_answer === given_answer\n                                    ? \"form-control-sm form-control-custom-sm\"\n                                    : \"txt-danger-line-through form-control-sm form-control-custom-sm\"\n                                }\n                              />\n\n                              {isReview ? (\n                                corrent_answer === given_answer ? (\n                                  <CorrectAnswer class=\"answer-badge bg-success\" />\n                                ) : (\n                                  <WrongAnswer class=\"answer-badge bg-danger\" />\n                                )\n                              ) : null}\n                              {isReview ? (\n                                corrent_answer === given_answer ? null : (\n                                  <Answer\n                                    class=\"badge bg-success mb-1\"\n                                    value={corrent_answer}\n                                  />\n                                )\n                              ) : null}\n                            </div>\n                          );\n                        } else if (node.name === \"select\") {\n                          let user_answer;\n                          answer.forEach((ans) => {\n                            if (ans.question_id === question.id) {\n                              ans.selected_answers.forEach((sel_ans) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  sel_ans[\"number\"]\n                                ) {\n                                  user_answer = sel_ans[\"id\"];\n                                }\n                              });\n                            }\n                          });\n                          let question_answer_number = [];\n                          let dropdown_corrent_answer;\n\n                          let question_flag;\n                          if (isReview) {\n                            question.possible_answers.forEach(\n                              (possible_answer) => {\n                                if (\n                                  possible_answer.number ===\n                                    parseInt(node.attribs[\"data-id\"]) &&\n                                  possible_answer.is_correct\n                                ) {\n                                  dropdown_corrent_answer =\n                                    possible_answer.prompt_content.replaceAll(\n                                      /(<([^>]+)>)/gi,\n                                      \"\"\n                                    );\n                                }\n                              }\n                            );\n                          }\n                          if (isReview && question.user_selected) {\n                            question.user_selected.forEach((user_selected) => {\n                              if (\n                                parseInt(node.attribs[\"data-id\"]) ===\n                                user_selected.number\n                              ) {\n                                question.possible_answers.forEach(\n                                  (possible_answer) => {\n                                    if (\n                                      possible_answer.number ===\n                                        user_selected.number &&\n                                      possible_answer.id === user_selected.id\n                                    ) {\n                                      question_answer_number.push(\n                                        possible_answer\n                                      );\n\n                                      question_flag =\n                                        possible_answer.is_correct;\n                                    }\n                                  }\n                                );\n                              }\n                            });\n                          } else if (isReview === false) {\n                            question.possible_answers.forEach(\n                              (question_number) => {\n                                if (\n                                  parseInt(node.attribs[\"data-id\"]) ===\n                                  question_number.number\n                                ) {\n                                  question_answer_number.push(question_number);\n                                }\n                              }\n                            );\n                          }\n                          return (\n                            <div class=\"inline-grid icon-wrapper\">\n                              <SelectChoice\n                                id={user_answer}\n                                disabled={isReview}\n                                data-question-type={question.type}\n                                data-value={node.attribs[\"data-id\"]}\n                                data-question-id={question.id}\n                                placeholder_id={node.attribs[\"data-id\"]}\n                                choices={question_answer_number}\n                                onblur={onAnswer}\n                                isReview={isReview}\n                                className={\n                                  question_flag === false\n                                    ? \"txt-danger-line-through form-select form-select-custom-sm\"\n                                    : \"form-select form-select-custom-sm\"\n                                }\n                              />\n                              {isReview ? (\n                                question_flag === true ? (\n                                  <CorrectAnswer class=\"answer-badge bg-success\" />\n                                ) : (\n                                  <WrongAnswer class=\"answer-badge bg-danger\" />\n                                )\n                              ) : null}\n                              {isReview ? (\n                                question_flag === true ? null : (\n                                  <Answer\n                                    class=\"badge bg-success mb-1\"\n                                    value={dropdown_corrent_answer}\n                                  />\n                                )\n                              ) : null}\n                            </div>\n                          );\n                        }\n                      },\n                    })}\n                  />\n                  {question.type === \"RadioBox\" ||\n                  question.type === \"CheckBox\" ? (\n                    <div\n                      className={\n                        question.question_horizontal_display\n                          ? \"row d-inline-flex  align-items-end \"\n                          : null\n                      }\n                    >\n                      {question.possible_answers.map(\n                        (possible_answers, pai) => (\n                          <div\n                            className={\n                              question.type === \"RadioBox\" ||\n                              question.type === \"CheckBox\"\n                                ? question.question_horizontal_display\n                                  ? \"d-flex mt-2 ms-3 inline-grid col\"\n                                  : \"d-flex mt-2 ms-3\"\n                                : null\n                            }\n                          >\n                            <label for={possible_answers.id}>\n                              {possible_answers.image &&\n                              question.question_horizontal_display ? (\n                                <img\n                                  src={possible_answers.image}\n                                  height={possible_answers.image_height}\n                                  px\n                                  alt=\"img\"\n                                />\n                              ) : (\n                                \"\"\n                              )}\n                            </label>\n                            <div\n                              className={\n                                question.type === \"RadioBox\" ||\n                                question.type === \"CheckBox\"\n                                  ? \"form-check d-flex align-items-center form-check-inline custom-form-check\"\n                                  : null\n                              }\n                            >\n                              {answer.forEach((ans) => {\n                                if (ans.question_id === question.id) {\n                                  ans.selected_answers.forEach((sel_ans) => {\n                                    if (possible_answers.id === sel_ans[\"id\"]) {\n                                      checkflag = true;\n                                    }\n                                  });\n                                }\n                              })}\n                              <span>\n                                {selectQuestionCounterOrCharacter({\n                                  index: pai,\n                                  show_abc_sequence: question.show_abc_sequence,\n                                }) + \".\"}\n                              </span>\n                              {question.type === \"CheckBox\" ? (\n                                <CheckBox\n                                  defaultChecked={\n                                    checkflag === true ? checkflag : null\n                                  }\n                                  index={\n                                    selectQuestionCounterOrCharacter({\n                                      index: pai,\n                                      show_abc_sequence:\n                                        question.show_abc_sequence,\n                                    }) + \".\"\n                                  }\n                                  data-question-id={question.id}\n                                  data-question-type={question.type}\n                                  onClick={onAnswer}\n                                  value={possible_answers.id}\n                                  id={possible_answers.id}\n                                  name={`answers[${qai}].selected_answers[${pai}]`}\n                                  checked={\n                                    isReview\n                                      ? isInUserSelectedAnswers(\n                                          question,\n                                          possible_answers.id\n                                        )\n                                      : null\n                                  }\n                                  className={\n                                    isReview &&\n                                    !isInUserSelectedAnswers(\n                                      question,\n                                      possible_answers.id\n                                    ) &&\n                                    possible_answers.is_correct\n                                      ? \"form-check-input correct_answers ms-2\"\n                                      : \"form-check-input ms-2\"\n                                  }\n                                />\n                              ) : question.type === \"RadioBox\" ? (\n                                <Radio\n                                  defaultChecked={\n                                    checkflag === true ? checkflag : null\n                                  }\n                                  index={\n                                    selectQuestionCounterOrCharacter({\n                                      index: pai,\n                                      show_abc_sequence:\n                                        question.show_abc_sequence,\n                                    }) + \".\"\n                                  }\n                                  data-question-id={question.id}\n                                  data-question-type={question.type}\n                                  onClick={onAnswer}\n                                  value={possible_answers.id}\n                                  id={possible_answers.id}\n                                  name={`answers[${qai}].selected_answers`}\n                                  checked={\n                                    isReview\n                                      ? isInUserSelectedAnswers(\n                                          question,\n                                          possible_answers.id\n                                        )\n                                      : null\n                                  }\n                                  className={\n                                    isReview &&\n                                    !isInUserSelectedAnswers(\n                                      question,\n                                      possible_answers.id\n                                    ) &&\n                                    possible_answers.is_correct\n                                      ? \"form-check-input correct_answers ms-2\"\n                                      : \"form-check-input ms-2\"\n                                  }\n                                />\n                              ) : null}\n                              {(checkflag = false)}\n                              <div\n                                class={\n                                  question.type === \"RadioBox\" ||\n                                  question.type === \"CheckBox\"\n                                    ? \"icon-wrapper\"\n                                    : null\n                                }\n                              >\n                                {question.type === \"RadioBox\" ||\n                                question.type === \"CheckBox\" ? (\n                                  <Label\n                                    for={possible_answers.id}\n                                    label={\n                                      <div\n                                        dangerouslySetInnerHTML={{\n                                          __html: `${\n                                            possible_answers.prompt_content\n                                              ? possible_answers.prompt_content\n                                              : \"\"\n                                          } ${\n                                            possible_answers.image &&\n                                            !question.question_horizontal_display\n                                              ? `<img src=${possible_answers.image} height=${possible_answers.image_height}px/>`\n                                              : \"\"\n                                          }`,\n                                        }}\n                                      />\n                                    }\n                                  />\n                                ) : null}\n                                {possible_answers.is_correct === true &&\n                                  isReview === true &&\n                                  (question.type === \"CheckBox\" ||\n                                    question.type === \"RadioBox\") &&\n                                  isInUserSelectedAnswers(\n                                    question,\n                                    possible_answers.id\n                                  ) && (\n                                    <CorrectAnswer class=\"answer-badge bg-success\" />\n                                  )}\n\n                                {possible_answers.is_correct === false &&\n                                  isReview === true &&\n                                  (question.type === \"CheckBox\" ||\n                                    question.type === \"RadioBox\") &&\n                                  isInUserSelectedAnswers(\n                                    question,\n                                    possible_answers.id\n                                  ) && (\n                                    <WrongAnswer class=\"answer-badge bg-danger\" />\n                                  )}\n                                {(question.type === \"CheckBox\" ||\n                                  question.type === \"RadioBox\") &&\n                                isReview &&\n                                size(question.user_selected) === 0 &&\n                                possible_answers.is_correct ? (\n                                  <WrongAnswer class=\"answer-badge bg-danger\" />\n                                ) : null}\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        })}\n    </div>\n  );\n}\n\nShowQuestions.defaultProps = {\n  questions: [],\n  currentQuestion: 1,\n  isReview: false,\n};\n\nShowQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n  onAnswer: PropTypes.func.isRequired,\n  currentQuestion: PropTypes.number.isRequired,\n  isReview: PropTypes.bool,\n};\nexport default ShowQuestions;\n","import { remove, size } from \"lodash\";\nimport find from \"lodash/find\";\nimport get from \"lodash/get\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { baseUrl } from \"../../libs/env\";\nimport { Col, Modal, ModalBody, ModalFooter, Row } from \"reactstrap\";\nimport { Exitbtn } from \"../../components/buttons/exitbtn\";\nimport { Level } from \"./../../components/badges/level\";\nimport { NumberOfQuestions } from \"./../../components/badges/number_of_question\";\nimport { SuggestedTime } from \"./../../components/badges/suggested_time\";\nimport BackButton from \"./../../components/buttons/BackButton\";\nimport NextButton from \"./../../components/buttons/NextButton\";\nimport { AudioPlayer } from \"../../components/listening_exercise/audio_player\";\nimport OpenButton from \"./../../components/buttons/OpenButton\";\nimport { Savebtn } from \"./../../components/buttons/savebtn\";\nimport SubmitButton from \"./../../components/buttons/SubmitButton\";\nimport { Header } from \"./../../components/header/header\";\nimport { ExerciseType } from \"./../../components/heading/heading\";\nimport SimpleModal from \"./../../components/modals/SimpleModal\";\nimport { includes } from \"lodash\";\nimport { join } from \"lodash\";\nimport { getStudentid } from \"../../libs/api/quiz\";\nimport ConfirmationModal from \"../../components/modals/ConfirmationModal\";\nimport { notify } from \"../../components/notification/Notification\";\nimport QuestionDescription from \"../../components/question/QuestionDescrption\";\nimport { QuestionHeading } from \"./../../components/question/question_heading\";\nimport { Timer } from \"./../../components/timer/timer\";\nimport { Speaking } from \"./speaking\";\nimport ShowQuestions from \"./ShowQuestions\";\n\nlet answers = [];\n\nconst QuizRunner = ({ isLoaded, data, onSubmit, isReview }) => {\n  if (data.completed_at != null) {\n    isReview = true;\n  }\n\n  const [modal, setModal] = useState(false);\n  const [speakingUrl , setSpeakingUrl] = useState(\"\");\n  let [showWarning, setShowWarnings] = useState();\n  const [notAnsweredQuestion, setNotAnsweredQuestions] = useState(\"\");\n  const toggle = () => setModal(!modal);\n  const [saveModal, setSaveModal] = useState(false);\n  const [isOpenAdditionalResourceModal, setOpenAdditionalResourceModal] =\n    useState(false);\n\n  const additionalResourceToggle = () =>\n    setOpenAdditionalResourceModal(!isOpenAdditionalResourceModal);\n  const saveToggle = () => setSaveModal(!saveModal);\n  const [isStopTimer, setIsStopTimer] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [questions, setQuestions] = useState([]);\n  const [timer, setTimer] = useState();\n  useEffect(() => {\n    if (\n      data &&\n      data.time_spent &&\n      size(answers) === 0 &&\n      isReview === undefined\n    ) {\n      data.questions.forEach((question_item) => {\n        if (size(question_item.user_selected) !== 0) {\n          answers.push({\n            question_id: question_item.id,\n            selected_answers: question_item[\"user_selected\"],\n          });\n        }\n      });\n    }\n  }, [data, isReview]);\n\n  useEffect(() => {\n    setTimer(\n      data.status === \"New\" || data.time_spent === null\n        ? \"00\"\n        : get(data, \"time_spent\")\n    );\n    setQuestions(get(data, \"questions\"));\n  }, [data]);\n\n  const alertUser = (e) => {\n    if (isReview === undefined) {\n      if (showWarning !== false) {\n        creatQuizDataAndSave();\n        e.preventDefault();\n        e.returnValue = \"\";\n      }\n    }\n  };\n  const creatQuizDataAndSubmit = () => {\n    const timer = window.sessionStorage.getItem(\"timer\");\n    if (speakingUrl !== \"\") {\n      answers=speakingUrl\n    }\n    let quiz_data = {\n      is_submit: true,\n      time_spent: parseInt(timer),\n      answers,\n    };\n    setIsStopTimer(true);\n    onSubmit(quiz_data);\n    setShowWarnings(false);\n    if (modal === true) {\n      toggle();\n    } else {\n      saveToggle();\n    }\n  };\n  const creatQuizDataAndSave = () => {\n    if (data.status !== null) {\n      const timer = window.sessionStorage.getItem(\"timer\");\n      let quiz_data = {\n        is_submit: false,\n        time_spent: parseInt(timer),\n        answers,\n      };\n\n      setIsStopTimer(false);\n      onSubmit(quiz_data);\n      setIsStopTimer(false);\n      notify(\"Successfully Saved!\");\n    }\n  };\n\n  useEffect(() => {\n    if (isReview !== undefined || data.status !== null) {\n      window.addEventListener(\"beforeunload\", alertUser);\n      return () => {\n        window.removeEventListener(\"beforeunload\", alertUser);\n      };\n    }\n  });\n\n  const onblur = (e) => {\n    let question_id = parseInt(e.target.getAttribute(\"data-question-id\"));\n    let question_type = e.target.getAttribute(\"data-question-type\");\n\n    let is_checkbox_checked =\n      question_type === \"CheckBox\" ? e.target.checked : null;\n    let is_radio_checked =\n      question_type === \"RadioBox\" ? e.target.checked : null;\n    let sel_answer = parseInt(e.target.value);\n    if (question_type === \"CheckBox\" || question_type === \"RadioBox\") {\n      if (answers.length === 0) {\n        answers.push({ question_id, selected_answers: [{ id: sel_answer }] });\n      } else {\n        let found_answer = find(answers, [\"question_id\", question_id]);\n        if (found_answer) {\n          let removed_selected_answer_arr = remove(\n            found_answer.selected_answers,\n            (sa_item_id) =>\n              sa_item_id[\"id\"] === sel_answer && is_checkbox_checked === false\n          );\n          if (\n            found_answer.selected_answers.length === 0 &&\n            is_checkbox_checked === false\n          ) {\n            let answer_index = answers.indexOf(found_answer);\n            remove(\n              answers,\n              (answer_item_id) =>\n                answers.indexOf(answer_item_id) === answer_index &&\n                is_checkbox_checked === false\n            );\n          }\n          if (removed_selected_answer_arr.length === 0 && is_checkbox_checked) {\n            found_answer.selected_answers.push({ id: sel_answer });\n          }\n          if (is_radio_checked === true) {\n            found_answer.selected_answers = [];\n            found_answer.selected_answers.push({ id: sel_answer });\n          }\n        } else {\n          answers.push({ question_id, selected_answers: [{ id: sel_answer }] });\n        }\n      }\n    } else if (question_type === \"FillInBlank\") {\n      if (e.target.value) {\n        let answer = e.target.value;\n        let question_number = parseInt(e.target.getAttribute(\"data-value\"));\n        if (answers.length === 0) {\n          answers.push({\n            question_id,\n            selected_answers: [{ number: question_number, answer: answer }],\n          });\n        } else {\n          let found_answer = find(answers, [\"question_id\", question_id]);\n          if (found_answer) {\n            let found_selected_answer = find(found_answer.selected_answers, [\n              \"number\",\n              question_number,\n            ]);\n            if (found_selected_answer) {\n              found_selected_answer[\"answer\"] = answer;\n            } else {\n              found_answer.selected_answers.push({\n                number: question_number,\n                answer: answer,\n              });\n            }\n          } else {\n            answers.push({\n              question_id,\n              selected_answers: [{ number: question_number, answer: answer }],\n            });\n          }\n        }\n      }\n    } else if (question_type === \"FillInBlankChoices\") {\n      let answer = parseInt(\n        e.target.selectedOptions[0].getAttribute(\"data-possible-question-id\")\n      );\n      let question_number = parseInt(e.target.getAttribute(\"data-value\"));\n      if (answers.length === 0) {\n        answers.push({\n          question_id,\n          selected_answers: [{ number: question_number, id: answer }],\n        });\n      } else {\n        let found_answer = find(answers, [\"question_id\", question_id]);\n        if (found_answer) {\n          let found_selected_answer = find(found_answer.selected_answers, [\n            \"number\",\n            question_number,\n          ]);\n          if (found_selected_answer) {\n            found_selected_answer[\"id\"] = answer;\n          } else {\n            found_answer.selected_answers.push({\n              number: question_number,\n              id: answer,\n            });\n          }\n        } else {\n          answers.push({\n            question_id,\n            selected_answers: [{ number: question_number, id: answer }],\n          });\n        }\n      }\n    }\n    console.log(\"answers\", answers);\n  };\n\n  const { handleSubmit } = useForm();\n\n  const onFormSubmit = () => {\n    console.log(speakingUrl);\n    let answeredQuestion = [];\n    let notAnswered = [];\n    let ans = [];\n    let fields;\n    answers.forEach((answer) => {\n      let selectdAnswers = [];\n      answeredQuestion.push(answer.question_id);\n      answer.selected_answers.forEach((sel_answer) => {\n        selectdAnswers.push(sel_answer.answer);\n      });\n      ans.push({ question_id: answer.question_id, selectdAnswers });\n    });\n\n    data.questions.forEach((question, i) => {\n      let noOfFilelds = [];\n      if (includes(answeredQuestion, question.id) === false) {\n        notAnswered.push(i + 1);\n      } else {\n        if (\n          question.type === \"FillInBlankChoices\" ||\n          question.type === \"FillInBlank\"\n        ) {\n          question.prompt_content.replace(\n            /\\[\\[[^\\]]*\\]\\]/g,\n            function replacer(matched) {\n              let fieldNumber = `${matched.match(/\\d+/)}`;\n              noOfFilelds.push(fieldNumber);\n            }\n          );\n          fields = size(noOfFilelds);\n\n          ans.forEach((sel) => {\n            if (sel.question_id === question.id) {\n              if (parseInt(fields) !== size(sel.selectdAnswers)) {\n                notAnswered.push(i + 1);\n              }\n            }\n          });\n        }\n      }\n    });\n    if (size(notAnswered) > 0) {\n      setNotAnsweredQuestions(join(notAnswered, \",\"));\n      setModal(!modal);\n    } else {\n      setSaveModal(!saveModal);\n    }\n  };\n  if (!isLoaded)\n    return <h1 className=\"text-primary text-center\">Loading...</h1>;\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <div className=\"p-md-5\">\n            <Row>\n              <Col sm>\n                <Header />\n              </Col>\n              <Col md className=\"mt-3 text-end\">\n                <span className=\"p-1 timer-content\">\n                  <b>\n                    {data && timer && (\n                      <Timer\n                        isStopTimer={\n                          data.status === null || isReview ? true : isStopTimer\n                        }\n                        totalTimeInSeconds={data.recom_time}\n                        localSpentTime={timer}\n                        onStop={(props) => {\n                          // alert(\"Times up\");\n                          setIsStopTimer(false);\n                          // creatQuizDataAndSubmit();\n                        }}\n                      />\n                    )}\n                  </b>\n                </span>\n              </Col>\n            </Row>\n            <div className=\"p-md-5\">\n              <div>\n                <div\n                  className=\"border border-light p-3 row\"\n                  xs=\"1\"\n                  sm=\"1\"\n                  md=\"4\"\n                >\n                  <Col md>\n                    <div class=\"content-align-center\">\n                      <ExerciseType title={data.task_type} />\n                    </div>\n                  </Col>\n\n                  <Col md className=\"center\">\n                    <SuggestedTime time={data.recom_time} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <NumberOfQuestions questions={size(data.questions)} />\n                  </Col>\n                  <Col md className=\"center\">\n                    <div className=\"d-flex\">\n                      <Level\n                        level={\n                          <div\n                            dangerouslySetInnerHTML={{\n                              __html: data.task_levels,\n                            }}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                </div>\n                <Row className=\"border border-light p-3\">\n                  <Col>\n                    <div class=\"d-flex flex-column\">\n                      <QuestionHeading question={data.prompt_content} />\n                      {data.audio ? (\n                        <div className=\"mb-3\">\n                          {\" \"}\n                          <AudioPlayer src={data.audio} />{\" \"}\n                        </div>\n                      ) : null}\n                      {data.html_content && (\n                        <QuestionDescription\n                          description={\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: data.html_content,\n                              }}\n                            />\n                          }\n                          showBtn={true}\n                        />\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n                <Row\n                  className={\n                    size(data.additional_resource) <= 0\n                      ? \"\"\n                      : \"p-3 border border-light\"\n                  }\n                >\n                  {size(data.additional_resource) <= 0 ? (\n                    \"\"\n                  ) : (\n                    <div>\n                      <span class=\"mt-3 mb-3\">\n                        <strong> Additional question resource </strong>\n                        <OpenButton\n                          onClick={() =>\n                            setOpenAdditionalResourceModal(\n                              !isOpenAdditionalResourceModal\n                            )\n                          }\n                        />\n                      </span>\n                    </div>\n                  )}\n\n                  <SimpleModal\n                    isOpen={isOpenAdditionalResourceModal}\n                    toggle={additionalResourceToggle}\n                    bodyContent={\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.additional_resource,\n                        }}\n                      />\n                    }\n                    footerContent={\n                      <button\n                        type=\"submit\"\n                        class=\"btn btn-sm mx-3 modal-button\"\n                        onClick={additionalResourceToggle}\n                      >\n                        Close\n                      </button>\n                    }\n                  />\n                </Row>\n                <Row className=\"border border-light p-3\">\n                  { data.task_type === \"Speaking Task\" ? <Speaking speakingUrl={setSpeakingUrl}/> :\n                  <div className=\"d-flex\">\n                    <ShowQuestions\n                      questions={questions}\n                      currentPage={currentPage}\n                      onAnswer={onblur}\n                      isReview={isReview}\n                      answer={answers}\n                      status={data.status}\n                    />\n                  </div>\n                }\n                </Row>\n                {\n                  isReview || data.total_pages === 1 ? null : \"\"\n                  // <>\n                  //   <Row className=\"border border-light mb-12\">\n                  //     <div class=\"row\">\n                  //       <div class=\"col-12 text-center\">\n                  //         <BookMarkButton />\n                  //       </div>\n                  //     </div>\n                  //   </Row>\n\n                  //   <Row>\n                  //     <div class=\"p-4 mb-3 jumptron shadow-4 rounded-3\">\n                  //       <p class=\"text-center\">\n                  //         Part {currentPage}/{data.total_pages}\n                  //       </p>\n                  //       <div className=\"d-flex justify-content-center\">\n                  //         {[...Array(data.total_pages)].map((data, i) => (\n                  //           <PartBar\n                  //             currentPage={i + 1}\n                  //             className=\"part-bar success-border flex-fill bd-highlight\"\n                  //             onClick={(props) => setCurrentPage(props)}\n                  //           />\n                  //         ))}\n                  //       </div>\n                  //     </div>\n                  //   </Row>\n                  // </>\n                }\n\n                <Row>\n                  <div class=\"mb-3 mt-3 p-0 m-0\">\n                    {isReview || data.status === null ? null : (\n                      <div class=\"inline float-start\">\n                        {data.task_type !== \"Speaking Task\"? <>\n                        <Savebtn click={creatQuizDataAndSave} />\n                        <ToastContainer />\n                        </>:null\n                          }\n                      </div>\n                    )}\n                    {isReview || data.status === null ? (\n                        <div className=\"row\">\n                        <div className=\"col-8\">\n                        {data && isReview ? (\n                          <div md className=\"mt-3 text-end\">\n                            <span className=\"p-1 score-content\">\n                              <b>\n                                <div className=\"inline\">\n                                  Score: { Math.floor(data.user_score)} / 100 points (\n                                  {Math.floor((data.user_score / 100) * 100)}%)\n                                </div>\n                              </b>\n                            </span>\n                          </div>\n                        ) : null}\n                        </div>\n                        <div className=\"text-end col-4\">\n                          {getStudentid ?\n                        <Exitbtn href={`${baseUrl}/school/school_quiz_grading/${getStudentid}`} />\n                        : \n                        <Exitbtn onClick={(e) => { e.preventDefault(); window.close() }} />\n\n                          }\n                      </div>\n                      </div>\n                      \n                    ) : (\n                      <div class=\"inline float-end\">\n                        <span className=\"mx-1\">\n                          {currentPage > 1 && (\n                            <BackButton\n                              onClick={() => {\n                                setCurrentPage(currentPage - 1);\n                              }}\n                            />\n                          )}\n                        </span>\n                        <span>\n                          {currentPage === data.total_pages && <SubmitButton />}\n                        </span>\n                        <span>\n                          {currentPage !== data.total_pages && (\n                            <NextButton\n                              onClick={() => {\n                                setCurrentPage(currentPage + 1);\n                              }}\n                            />\n                          )}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </Row>\n              </div>\n            </div>\n          </div>\n        </form>\n        <Modal\n          isOpen={modal}\n          size=\"lg\"\n          toggle={toggle}\n          className=\"modal-dialog-centered \"\n        >\n          <ModalBody>\n            <h4 className=\"text-primary\">\n              <strong>Warning!</strong>\n            </h4>\n            <p>Some answers are not completed, are you sure to continue?</p>\n            <p className=\"text-danger\">\n              Question no: {notAnsweredQuestion} not completed.\n            </p>\n          </ModalBody>\n          <ModalFooter style={{ border: 0 }}>\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm mx-3 modal-button\"\n              onClick={toggle}\n            >\n              Edit\n            </button>\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm mx-3 modal-button\"\n              onClick={creatQuizDataAndSubmit}\n            >\n              Submit\n            </button>\n          </ModalFooter>\n        </Modal>\n        <ConfirmationModal\n          isOpen={saveModal}\n          toggle={saveToggle}\n          onClick={creatQuizDataAndSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default QuizRunner;\n","import React from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { baseUrl } from \"../libs/env\";\nimport { Exitbtn } from \"../components/buttons/exitbtn\";\nimport { Header } from \"../components/header/header\";\n\n\nconst Error = ({ isLoaded, data,  }) => {\n\n\n  if (!isLoaded)\n    return <h1 className=\"text-center\">Loading...</h1>;\n  return (\n    <div className=\"dashboard-wrapper bg-white m-27\">\n      <div class=\"container quiz-background\">\n       \n            <Row>\n              <Col className=\"text-center mt-5\">\n                <Header />\n              </Col>\n          </Row>\n          <Row>\n              <Col className=\"text-center mt-5\">\n                  <h5>Please activate your account first before sending any exercises.</h5>\n              </Col>\n          </Row>\n          <Row>\n              <Col className=\"text-center my-5\">\n              <Exitbtn href={baseUrl} />\n              </Col>\n          </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport WrittingQuiz from \"./pages/quiz/WrittingQuiz\";\nimport { Inspection } from \"./components/Inspection/Inspection\";\nimport { FillInBlanks } from \"./components/fill_in_blanks/fill_in_blanks\";\nimport QuizSubmit from \"./components/true_false_questions/QuizSubmit\";\nimport QuizRunner from \"./pages/quiz/QuizRunner\";\nimport quizAPI from \"./libs/api/quiz\";\nimport { baseUrl } from \"./libs/env\";\nimport Error from \"./erros/Error\";\nimport { isLocalHosted } from \"./libs/env\";\nimport { useHistory } from \"react-router-dom\";\n\nconst App = (props) => {\n  let  RoutePath=`/:id/:token`;\n  const [items, setItems] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const getQuizId = () => window.location.pathname.split(\"/\")[1];\n  let history = useHistory();\n  if (isLocalHosted === false) {\n  Inspection();\n  }\n\n  useEffect(() => {\n    quizAPI\n      .get({ id: getQuizId() })\n      .then((res) => res.json())\n      .then((json) => {\n        setIsLoaded(true);\n        setItems(json);\n      })\n      .catch((error) => console.log(error.message));\n  }, []);\n\n  const submitQuiz = useCallback(\n    (data) => {\n      if (data.is_submit) {\n        quizAPI\n          .post({ id: getQuizId(), data })\n          .then((res) => res.json())\n          .then((json) => {\n            setIsLoaded(true);\n            setItems(json);\n            if (json.is_show_feedback === false) {\n              history.push(\"/stagging\");\n            }\n          });\n      } else {\n        quizAPI.post({ id: getQuizId(), data });\n      }\n    },\n    [history]\n  );\n  if (window.location.pathname.split(\"/\").length === 4){\n      RoutePath=`/:id/:token/:id`;\n  }\n\n  return (\n    <Switch>\n      <Route exact path={RoutePath}>\n        {items.task_type === \"Writing Task\" ? (\n          <WrittingQuiz\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        ) : items.detail ? <Error data={items} isLoaded={isLoaded} /> :(\n          <QuizRunner data={items} isLoaded={isLoaded} onSubmit={submitQuiz} />\n        )}\n      </Route>\n      <Route exact path={`/quizsubmit`}>\n        <QuizSubmit data={items} isLoaded={isLoaded} />\n      </Route>\n      <Route path={\"/validations\"}>\n        <FillInBlanks />\n      </Route>\n      <Route path={\"/quizreview\"}>\n        {items.task_type === \"Writing Task\" ? (\n          <WrittingQuiz\n            isReview={true}\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        ) : (\n          <QuizRunner\n            isReview={true}\n            data={items}\n            isLoaded={isLoaded}\n            onSubmit={submitQuiz}\n          />\n        )}\n      </Route>\n      <Route path={\"/stagging\"} render={() => (window.location = baseUrl)} />\n      <Route exact path={`*`}>\n        404 - Not fount\n      </Route>\n    </Switch>\n  );\n};\n\nexport default App;\n","export const Inspection = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    if (event.ctrlKey && (event.key === \"S\" || event.key === \"s\")) {\n      event.preventDefault();\n    }\n    if (\n      event.key === \"F12\" ||\n      (event.ctrlKey && event.key === \"C\") ||\n      (event.ctrlKey && (event.key === \"E\" || event.key === \"e\")) ||\n      (event.ctrlKey && (event.key === \"J\" || event.key === \"j\")) ||\n      (event.ctrlKey && (event.key === \"I\" || event.key === \"i\")) ||\n      (event.ctrlKey && (event.key === \"K\" || event.key === \"k\")) ||\n      (event.ctrlKey && (event.key === \"U\" || event.key === \"u\"))\n    ) {\n      event.preventDefault();\n    }\n  });\n  document.addEventListener(\"contextmenu\", function (e) {\n    e.preventDefault();\n  });\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}